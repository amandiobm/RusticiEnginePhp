swagger: '2.0'
info:
  description: Rustici Engine API
  version: '2.0'
  title: Rustici Engine API
  contact:
    name: support@rusticisoftware.com
basePath: /api/v2/
securityDefinitions:
  basic:
    type: basic
  oauth:
    type: oauth2
    flow: implicit
    authorizationUrl: /authorize
    scopes:
      read: Grants read access
      write: Grants write access
      delete: Grants deletion access
      admin: 'Grants read, write, and account management access'
      'admin:read': Grants read-only admin access
      'admin:createTenant': Grants tenant creation access
      'admin:deleteData': Grants ability to delete an entire tenants data or do PII deletion
      'admin:writeConfiguration': Grants write administrative configuration settings
      'admin:writeCredential': Grants ability to create a credential
      'admin:connector': Grants access to administer content connectors
      'read:connectorContent': Grants access to read content connector list of available content
      'read:course': Grants read access to course resources
      'write:course': Grants write access to course resources
      'delete:course': Grants deletion access to course resources
      'read:dispatch': Grants read access to dispatch resources
      'write:dispatch': Grants write access to dispatch resources
      'delete:dispatch': Grants deletion access to dispatch resources
      'read:ping': Grants read access to the ping resource
      'read:about': Grants read access to about resource
      'read:registration': Grants read access to registration resources
      'write:registration': Grants write access to registration resources
      'delete:registration': Grants deletion access to registration resources
      'read:xapicredential': Grants read access to xapi credential resources
      'write:xapicredential': Grants write access to xapi credential resources
      'delete:xapicredential': Grants deletion access to xapi credential resources
      'read:xapipipe': Grants read access to xapi pipe resources
      'write:xapipipe': Grants write access to xapi pipe resources
      'delete:xapipipe': Grants deletion access to xapi pipe resources
      'configure:server': Includes server administrator settings when managing configuration
      'request:secrets': Grants read access to encrypted configuration settings
      'write:player': Grants write access to the player resources
      'read:player': Grants read access to the player resources
      'read:contentVault': Grants read access to the content vault resources
      'pens:collect': Grants access to make PENS collect requests
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
parameters:
  useUsageStatistics:
    name: useUsageStatistics
    in: query
    required: false
    type: boolean
    default: false
  singleSco:
    name: singleSco
    in: query
    required: false
    type: boolean
    description: >
      Required if learningStandard is specified. Scopes settings to whether a
      package has only one SCO or assignable unit within it or not. To apply a
      configuration setting to a learning standard for single and multi-SCO
      content, it must be set for both scopes.
  learningStandard:
    name: learningStandard
    in: query
    required: false
    type: string
    description: >-
      Required if singleSco is specified. Scopes the request to the provided
      learning standard.
    enum:
      - SCORM11
      - SCORM12
      - SCORM20042NDEDITION
      - SCORM20043RDEDITION
      - SCORM20044THEDITION
      - AICC
      - XAPI
      - CMI5
      - LTI11
      - LTI13
  includeMetadata:
    name: includeMetadata
    in: query
    required: false
    default: false
    type: boolean
  includeHidden:
    name: includeHiddenSettings
    in: query
    required: false
    default: false
    type: boolean
    description: >
      Should settings that are declared to be hidden be included. Note: such
      settings generally do not need to be modified, and may be confusing.
  includeSecret:
    name: includeSecretSettings
    in: query
    required: false
    default: false
    type: boolean
    description: >
      Should settings that are stored encrypted (type 'secretString') be
      included. Note: if included, the decrypted value will be returned.
  optionalCredentialsTenant:
    name: engineTenantName
    in: header
    required: false
    type: string
    description: >
      If specified, the tenant that will be used to store or validate the
      credentials or token. If not specified, the system data store / settings
      will be used. Note that PermissionsSchema contains 'tenantName' which
      should be used for any permissions that need to be scoped to a particular
      tenant.
  credentialId:
    name: credentialId
    in: path
    required: true
    type: string
  jobId:
    name: jobId
    in: path
    required: true
    type: string
  processReplacementTokens:
    name: processReplacementTokens
    in: query
    required: false
    default: true
    type: boolean
    description: >-
      Whether to process replacement tokens (false returns the raw value of each
      setting, without tokens or environment variable replacements)
  systemSchemaOnly:
    name: systemSchemaOnly
    in: query
    default: false
    type: boolean
    description: >-
      Deletes tenant data from the system schema only. This does not remove the
      mapping between the tenant name and key.
  subscriptionId:
    name: subscriptionId
    in: path
    required: true
    type: string
  subscriptionAuthId:
    name: subscriptionAuthId
    in: path
    required: true
    type: string
  courseId:
    name: courseId
    in: path
    required: true
    type: string
  versionId:
    name: versionId
    in: path
    required: true
    type: integer
    format: int32
    description: the course version
  importCourseId:
    name: courseId
    in: query
    required: true
    type: string
    description: >-
      A unique identifier your application will use to identify the course after
      import. Your application is responsible both for generating this unique ID
      and for keeping track of the ID for later use.
  mayCreateNewVersion:
    name: mayCreateNewVersion
    in: query
    default: false
    type: boolean
    description: >-
      Is it OK to create a new version of this course? If this is set to false
      and the course already exists, the upload will fail. If true and the
      course already exists then a new version will be created. No effect if the
      course doesn't already exist.
  importDryRun:
    name: dryRun
    in: query
    default: false
    type: boolean
    description: >-
      Validate the course can be imported (mainly by validating the manifest),
      but don't actually import it.
  importFile:
    name: file
    in: formData
    description: The course content file to import.
    type: file
  contentMetadata:
    name: contentMetadata
    in: formData
    description: Serialized 'mediaFileMetadata' schema.
    type: string
    required: false
  uploadedContentType:
    name: uploadedContentType
    in: header
    description: The MIME type identifier for the content to be uploaded
    type: string
    required: false
    default: application/zip
  includeRegistrationCount:
    name: includeRegistrationCount
    in: query
    required: false
    default: false
    type: boolean
    description: Include the registration count in the results
  includeCourseMetadata:
    name: includeCourseMetadata
    in: query
    required: false
    default: false
    type: boolean
    description: Include course metadata in the results
  updateAssetPolicy:
    name: updateAssetPolicy
    in: query
    type: string
    default: lax
    description: >-
      Describes how Engine should handle importing asset files with respect to
      overwriting files. Valid values are 'reject', 'strict', and 'lax'. A
      'reject' policy request will fail if the asset file already exists on the
      system ('overwriting' not allowed). A 'strict' policy request will fail if
      the asset file does not already exist ('overwriting' is required). A 'lax'
      policy request will not consider whether the file already exists (i.e., it
      will attempt to import in all cases).
  destination:
    name: destination
    in: formData
    description: >-
      Path, relative to the course's Content Directory, that indicates where to
      store the uploaded asset file.
    type: string
    required: true
  exportTypeGet:
    name: exportType
    in: query
    required: true
    type: string
    enum:
      - OFFLINE
      - ONLINE
  exportTypeDelete:
    name: exportType
    in: query
    required: true
    type: string
    enum:
      - ALL
      - OFFLINE
  dispatchId:
    name: dispatchId
    in: path
    required: true
    type: string
  destinationId:
    name: destinationId
    in: path
    required: true
    type: string
  externalConfig:
    name: externalConfig
    in: query
    required: true
    type: string
    description: External configuration object
  registrationId:
    name: registrationId
    in: path
    required: true
    type: string
    description: id for this registration
  instanceId:
    name: instanceId
    in: path
    required: true
    type: integer
    format: int32
    description: the instance of this registration
  includeChildResults:
    name: includeChildResults
    in: query
    required: false
    default: false
    type: boolean
    description: >-
      Include information about each learning object, not just the top level in
      the results
  includeInteractionsAndObjectives:
    name: includeInteractionsAndObjectives
    in: query
    required: false
    default: false
    type: boolean
    description: Include interactions and objectives in the results
  includeRuntime:
    name: includeRuntime
    in: query
    required: false
    default: false
    type: boolean
    description: Include runtime details in the results
  createXapiRegistrationIdIfAbsent:
    name: createXapiRegistrationIdIfAbsent
    in: query
    required: false
    default: false
    type: boolean
    description: >-
      create the xAPI registration ID for this registration if one does not
      already exist
  courseVersion:
    name: courseVersion
    in: query
    required: false
    type: integer
    format: int32
    description: >-
      The version of the course you want to create the registration for. Unless
      you have a reason for using this you probably do not need to.
  activityId:
    name: activityId
    in: query
    required: false
    default: ''
    type: string
    description: >-
      Empty string indicates the overall course. Otherwise, only the activity
      (the AU for cmi5) with the specified ID is updated. Updating a single
      activity is currently only supported in cmi5; for other learning
      standards, this activity ID must be absent or be an empty string to
      finalize the progress on the entire course.
  registrationFinalState:
    name: registrationFinalState
    in: body
    required: true
    schema:
      $ref: '#/definitions/FinalizeRegistrationProgressSchema'
  xapiCredentialId:
    name: xapiCredentialId
    in: path
    required: true
    type: string
    description: id for this xAPI credential
  statementPipeId:
    name: statementPipeId
    in: path
    required: true
    type: string
    description: id for this xAPI statement pipe
  connectorId:
    name: connectorId
    in: path
    required: true
    type: string
    description: the connector id
  connectorIdQuery:
    name: connectorId
    in: query
    required: false
    type: string
    description: the connector id
  tenant:
    name: engineTenantName
    in: header
    required: true
    type: string
    description: tenant for this request
  optionalTenant:
    name: engineTenantName
    in: header
    required: false
    type: string
    description: optional tenant for this request
  linkExpiry:
    name: expiry
    in: query
    required: false
    default: 120
    type: integer
    format: int32
    description: Number of seconds from now this link will expire in.
  since:
    name: since
    in: query
    required: false
    type: string
    format: date-time
    description: >-
      Only items updated since the specified ISO 8601 TimeStamp (inclusive) are
      included. If a time zone is not specified, UTC time zone will be used.
  until:
    name: until
    in: query
    required: false
    type: string
    format: date-time
    description: >-
      Only items updated up until the specified ISO 8601 TimeStamp (inclusive)
      are included. If a time zone is not specified, UTC time zone will be used.
  more:
    name: more
    in: query
    required: false
    type: string
    description: >-
      Value for this parameter will be provided in the 'more' property of lists,
      where needed. An opaque value, construction and parsing may change without
      notice.
  learnerId:
    name: learnerId
    in: query
    required: false
    type: string
    description: Only entries for the specified learner id will be included.
paths:
  /about:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Get back the version and platform of the running instance of Engine
      tags:
        - about
      operationId: GetAbout
      responses:
        '200':
          description: about response
          schema:
            $ref: '#/definitions/AboutSchema'
      security:
        - oauth:
            - read
            - 'read:about'
        - basic: []
  /about/userCount:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: >-
        Gets the number of users for the specified tenant or across all tenants
        when none is specified
      tags:
        - about
      operationId: GetUserCount
      parameters:
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
        - $ref: '#/parameters/useUsageStatistics'
      responses:
        '200':
          description: user count response
          schema:
            $ref: '#/definitions/UserCountSummarySchema'
      security:
        - oauth:
            - read
            - 'read:about'
        - basic: []
  /about/registrationCount:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: >-
        Gets the number of created or launched registrations for the specified
        tenant or across all tenants when none is specified
      tags:
        - about
      operationId: GetRegistrationCount
      parameters:
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
      responses:
        '200':
          description: registration count response
          schema:
            $ref: '#/definitions/RegistrationCountSummarySchema'
      security:
        - oauth:
            - read
            - 'read:about'
        - basic: []
  /appManagement/tenants:
    get:
      summary: Get list of all tenants
      tags:
        - appManagement
      operationId: GetTenantList
      parameters:
        - name: includeDeactivated
          in: query
          default: false
          type: boolean
      responses:
        '200':
          description: List of tenants
          schema:
            $ref: '#/definitions/TenantListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
  '/appManagement/tenants/{tenantName}':
    put:
      summary: Create or update tenant
      tags:
        - appManagement
      operationId: CreateOrUpdateTenant
      parameters:
        - name: tenantName
          in: path
          required: true
          type: string
        - name: tenantProperties
          in: body
          required: true
          schema:
            title: TenantProperties
            type: object
            properties:
              active:
                type: boolean
                default: true
                description: Is this tenant active (valid for use) ?
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:createTenant'
    delete:
      summary: >-
        Delete a tenant. Warning: If tenant data is not deleted first, this will
        leave orphaned rows that can only be deleted manually. Does not remove
        any data, but does remove mapping between name and key used to store
        data. Consider deactivating instead.
      tags:
        - appManagement
      operationId: DeleteTenant
      parameters:
        - name: tenantName
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:deleteData'
  '/appManagement/tenants/{tenantName}/data':
    delete:
      summary: Delete all of a tenant's data.
      tags:
        - appManagement
      operationId: DeleteTenantData
      parameters:
        - name: tenantName
          in: path
          required: true
          type: string
        - $ref: '#/parameters/systemSchemaOnly'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:deleteData'
  '/appManagement/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/optionalTenant'
      - $ref: '#/parameters/learningStandard'
      - $ref: '#/parameters/singleSco'
    delete:
      summary: Clears the `settingId` value for this level
      tags:
        - appManagement
      operationId: DeleteApplicationConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeConfiguration'
  /appManagement/configuration/updateEncryptedSettings:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: >-
        Re-write settings, and statement pipe passwords using the current
        encryption settings. For password rotation.
      tags:
        - appManagement
      operationId: PostUpdateEncryptedSetting
      responses:
        '204':
          description: Rotated setting encryption successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeConfiguration'
  /appManagement/configuration:
    parameters:
      - $ref: '#/parameters/optionalTenant'
      - $ref: '#/parameters/learningStandard'
      - $ref: '#/parameters/singleSco'
    get:
      summary: Returns all configuration settings for this level
      tags:
        - appManagement
      operationId: GetApplicationConfiguration
      parameters:
        - $ref: '#/parameters/includeMetadata'
        - $ref: '#/parameters/includeHidden'
        - $ref: '#/parameters/includeSecret'
        - $ref: '#/parameters/processReplacementTokens'
      responses:
        '200':
          description: List of configuration settings for this level
          schema:
            $ref: '#/definitions/SettingListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeConfiguration'
    post:
      summary: Set configuration settings for this level.
      tags:
        - appManagement
      operationId: SetApplicationConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeConfiguration'
  /appManagement/authenticatedCredential:
    parameters:
      - $ref: '#/parameters/optionalCredentialsTenant'
    get:
      summary: Get information about the credential used to authenticate this request.
      tags:
        - appManagement
      operationId: GetAuthenticatedCredential
      responses:
        '200':
          description: >
            Information about the credential used to authenticate this request.
            Note permissions are restrictive, so authentication that can perform
            any operation will result in empty permissions.
          schema:
            $ref: '#/definitions/CredentialSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth: []
  /appManagement/credentials:
    parameters:
      - $ref: '#/parameters/optionalCredentialsTenant'
    get:
      summary: List of credentials
      tags:
        - appManagement
      operationId: GetCredentials
      responses:
        '200':
          description: List of credentials for this tenant
          schema:
            $ref: '#/definitions/CredentialListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    post:
      summary: Create credential
      tags:
        - appManagement
      operationId: CreateCredential
      parameters:
        - name: credentialRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/CredentialRequestSchema'
      responses:
        '200':
          description: Information about the created credential
          schema:
            $ref: '#/definitions/CredentialCreatedSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeCredential'
  '/appManagement/credentials/{credentialId}':
    parameters:
      - $ref: '#/parameters/optionalCredentialsTenant'
      - $ref: '#/parameters/credentialId'
    delete:
      summary: Removes `credentialId` credentials
      tags:
        - appManagement
      operationId: DeleteCredential
      responses:
        '204':
          description: Deleted credential successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`credentialId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeCredential'
    get:
      summary: Get information on `credentialId` credential
      tags:
        - appManagement
      operationId: GetCredential
      responses:
        '200':
          description: Information for this credential
          schema:
            $ref: '#/definitions/CredentialSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`credentialId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    put:
      summary: Update `credentialId` credentials
      tags:
        - appManagement
      operationId: UpdateCredential
      parameters:
        - name: credentialUpdate
          in: body
          required: true
          schema:
            $ref: '#/definitions/CredentialRequestSchema'
      responses:
        '204':
          description: Updated credential successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`credentialId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeCredential'
  '/appManagement/credentials/{credentialId}/resetSecret':
    parameters:
      - $ref: '#/parameters/optionalCredentialsTenant'
      - $ref: '#/parameters/credentialId'
    post:
      summary: Reset credential secret
      tags:
        - appManagement
      operationId: ResetCredentialSecret
      responses:
        '200':
          description: The new credential secret
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`credentialId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeCredential'
  /appManagement/token:
    parameters:
      - $ref: '#/parameters/optionalCredentialsTenant'
    post:
      summary: Create token
      description: >
        Creates, signs and returns a token based on the provided permissions, if
        the credentials used to request the token have the permissions being
        requested. Note: the token is not stored and therefore can not be
        modified or deleted. The requested permissions are encoded in the token
        which is then signed. As long as the secret used to create it is not
        changed the token will be valid until it expires.
      tags:
        - appManagement
      operationId: CreateToken
      parameters:
        - name: tokenRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenRequestSchema'
      responses:
        '200':
          description: The token
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:writeCredential'
    get:
      summary: Inspect token
      description: >
        Verifies the signature of the provided token, and if valid returns
        information about the token
      tags:
        - appManagement
      operationId: InspectToken
      parameters:
        - name: token
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Token information
          schema:
            $ref: '#/definitions/TokenInfoSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
  /appManagement/PII/deletionJob:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: >-
        Initiate a job to delete a user's Personal Identifying Information from
        the system.
      tags:
        - appManagement
      operationId: PostPIIDeletionJob
      parameters:
        - name: entities
          in: body
          required: true
          schema:
            $ref: '#/definitions/PIIDeletionRequestSchema'
      responses:
        '200':
          description: Information about the PII deletion job
          schema:
            $ref: '#/definitions/PIIDeletionRequestResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:deleteData'
  '/appManagement/PII/deletionJob/{jobId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/jobId'
    get:
      summary: Check the status of a PII deletion job with the provided job id.
      tags:
        - appManagement
      operationId: GetPIIDeletionJob
      responses:
        '200':
          description: Information about the PII deletion job
          schema:
            $ref: '#/definitions/PIIDeletionResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`jobId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
  /appManagement/subscriptions:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Returns list of subscriptions
      tags:
        - appManagement
      operationId: GetSubscriptions
      parameters:
        - $ref: '#/parameters/more'
        - name: topic
          in: query
          required: false
          type: string
          enum:
            - CourseImport
            - CourseLaunched
            - RegistrationChanged
            - NotificationFailed
            - XapiGetAuthority
          description: Only subscriptions for the provided topic will be included
        - name: subtopic
          description: >-
            Only subscriptions which specify the provided sub-topic will be
            included
          in: query
          required: false
          type: string
          enum:
            - Success
            - Failure
            - ScoreChanged
            - CompletionChanged
            - SuccessChanged
            - ObjectiveChanged
            - InteractionChanged
            - Exit
            - RunTimeActivityCompletionChanged
            - RunTimeActivitySuccessChanged
            - InitialAttempt
            - FinalAttempt
      responses:
        '200':
          description: List of subscriptions
          schema:
            $ref: '#/definitions/SubscriptionListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    post:
      summary: Create subscription
      tags:
        - appManagement
      operationId: CreateSubscription
      parameters:
        - name: subscriptionDefinition
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubscriptionDefinitionSchema'
      responses:
        '200':
          description: ID of the created subscription
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
  '/appManagement/subscriptions/{subscriptionId}':
    parameters:
      - $ref: '#/parameters/subscriptionId'
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Returns a specific subscription
      tags:
        - appManagement
      operationId: GetSubscription
      responses:
        '200':
          description: The subscription
          schema:
            $ref: '#/definitions/SubscriptionEntrySchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    put:
      summary: Update subscription. Partial updates not supported.
      tags:
        - appManagement
      operationId: UpdateSubscription
      parameters:
        - name: subscriptionDefinition
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubscriptionDefinitionSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
    delete:
      summary: Delete subscription
      tags:
        - appManagement
      operationId: DeleteSubscription
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
  /appManagement/subscriptions/authConfigurations:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Returns list of subscription authentication configurations
      tags:
        - appManagement
      operationId: GetSubscriptionAuths
      parameters:
        - $ref: '#/parameters/more'
      responses:
        '200':
          description: List of subscription authentication configurations
          schema:
            $ref: '#/definitions/SubscriptionAuthListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    post:
      summary: Create subscription authentication configurations
      tags:
        - appManagement
      operationId: CreateSubscriptionAuth
      parameters:
        - name: subscriptionAuthDefinition
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubscriptionAuthDefinitionSchema'
      responses:
        '200':
          description: ID of the created subscription authentication configuration
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
  '/appManagement/subscriptions/authConfigurations/{subscriptionAuthId}':
    parameters:
      - $ref: '#/parameters/subscriptionAuthId'
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Returns a specific subscription authentication configuration.
      tags:
        - appManagement
      operationId: GetSubscriptionAuth
      responses:
        '200':
          description: The subscription auth
          schema:
            $ref: '#/definitions/SubscriptionAuthDefinitionSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:read'
    put:
      summary: >-
        Update subscription authentication configuration. Partial updates not
        supported.
      tags:
        - appManagement
      operationId: UpdateSubscriptionAuth
      parameters:
        - name: subscriptionAuthDefinition
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubscriptionAuthDefinitionSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
    delete:
      summary: >-
        Delete subscription authentication configuration. Any subscription using
        this authentication configuration will be disabled.
      tags:
        - appManagement
      operationId: DeleteSubscriptionAuth
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:write'
  '/courses/{courseId}/title':
    parameters:
      - $ref: '#/parameters/tenant'
    put:
      summary: Sets the course title for `courseId`
      tags:
        - course
      operationId: SetCourseTitle
      parameters:
        - $ref: '#/parameters/courseId'
        - name: title
          in: body
          required: true
          schema:
            $ref: '#/definitions/TitleSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/preview':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    post:
      summary: Returns the link to use to preview this course
      tags:
        - course
      operationId: BuildCoursePreviewLaunchLink
      parameters:
        - name: launchLinkRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/LaunchLinkRequestSchema'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/LaunchLinkSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    delete:
      summary: Clears the `settingId` value for this course
      tags:
        - course
      operationId: DeleteCourseConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    get:
      summary: Returns all configuration settings for this course
      tags:
        - course
      operationId: GetCourseConfiguration
      parameters:
        - $ref: '#/parameters/includeMetadata'
        - $ref: '#/parameters/includeHidden'
        - $ref: '#/parameters/includeSecret'
        - $ref: '#/parameters/processReplacementTokens'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SettingListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    post:
      summary: Set configuration settings for this course.
      tags:
        - course
      operationId: SetCourseConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}':
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: Get information about `courseId`
      tags:
        - course
      operationId: GetCourse
      parameters:
        - $ref: '#/parameters/courseId'
        - $ref: '#/parameters/includeRegistrationCount'
        - $ref: '#/parameters/includeCourseMetadata'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CourseSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      summary: Delete `courseId`
      tags:
        - course
      operationId: DeleteCourse
      parameters:
        - $ref: '#/parameters/courseId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:course'
        - basic: []
  '/courses/{courseId}/zip':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    get:
      parameters:
        - $ref: '#/parameters/exportTypeGet'
      summary: Get the zip package for the latest course version
      tags:
        - course
      operationId: GetCourseZip
      produces:
        - application/zip
      responses:
        '200':
          description: ''
          schema:
            type: file
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      parameters:
        - $ref: '#/parameters/exportTypeDelete'
      tags:
        - course
      summary: Deletes the exported zip for the latest version of the specified course
      operationId: DeleteCourseZip
      responses:
        '204':
          description: Course zip deleted successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - delete
            - 'delete:course'
        - basic: []
  '/courses/{courseId}/asset/list':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    get:
      summary: Get the list of files in the current version of the specified course
      tags:
        - course
      operationId: GetCourseFileList
      responses:
        '200':
          description: List of files in the course
          schema:
            $ref: '#/definitions/FileListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/asset/list':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    get:
      summary: Get the list of files in the specified version of the specified course
      tags:
        - course
      operationId: GetCourseVersionFileList
      responses:
        '200':
          description: List of files in the course
          schema:
            $ref: '#/definitions/FileListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/xAPIStatements':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/learnerId'
      - $ref: '#/parameters/since'
      - $ref: '#/parameters/until'
      - $ref: '#/parameters/more'
    get:
      summary: Get xAPI statements for `courseId`
      tags:
        - course
      operationId: GetCourseStatements
      responses:
        '200':
          description: Course statements
          schema:
            $ref: '#/definitions/XapiStatementResult'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/versions':
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: Get all versions of `courseId`
      tags:
        - course
      operationId: GetCourseVersions
      parameters:
        - $ref: '#/parameters/courseId'
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
        - $ref: '#/parameters/includeRegistrationCount'
        - $ref: '#/parameters/includeCourseMetadata'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CourseListNonPagedSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    get:
      summary: Get version `versionId` of `courseId`
      tags:
        - course
      operationId: GetCourseVersionInfo
      parameters:
        - $ref: '#/parameters/includeRegistrationCount'
        - $ref: '#/parameters/includeCourseMetadata'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CourseSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` version `versionId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      summary: Delete version `versionId` of `courseId`
      tags:
        - course
      operationId: DeleteCourseVersion
      responses:
        '204':
          description: ''
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` version `versionId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/zip':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    get:
      parameters:
        - $ref: '#/parameters/exportTypeGet'
      summary: Get the zip package for the specified course version
      tags:
        - course
      operationId: GetVersionedCourseZip
      produces:
        - application/zip
      responses:
        '200':
          description: ''
          schema:
            type: file
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found or not exported for offline use'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      parameters:
        - $ref: '#/parameters/exportTypeDelete'
      tags:
        - course
      summary: Deletes the exported zip for the specified course version
      operationId: DeleteVersionedCourseZip
      responses:
        '204':
          description: Course zip deleted successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - delete
            - 'delete:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/preview':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    post:
      summary: Returns the link to use to preview this course
      tags:
        - course
      operationId: BuildCoursePreviewLaunchLinkWithVersion
      parameters:
        - name: launchLinkRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/LaunchLinkRequestSchema'
      responses:
        '200':
          description: The preview launch link for this version
          schema:
            $ref: '#/definitions/LaunchLinkSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/xAPIStatements':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
      - $ref: '#/parameters/learnerId'
      - $ref: '#/parameters/since'
      - $ref: '#/parameters/until'
      - $ref: '#/parameters/more'
    get:
      summary: Get xAPI statements for version `versionId` of `courseId`
      tags:
        - course
      operationId: GetCourseVersionStatements
      responses:
        '200':
          description: Course version statements
          schema:
            $ref: '#/definitions/XapiStatementResult'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    get:
      summary: Returns all configuration settings for this course and version.
      tags:
        - course
      operationId: GetCourseVersionConfiguration
      parameters:
        - $ref: '#/parameters/includeMetadata'
        - $ref: '#/parameters/includeHidden'
        - $ref: '#/parameters/includeSecret'
        - $ref: '#/parameters/processReplacementTokens'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/SettingListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    post:
      summary: Set configuration settings for this course and version.
      tags:
        - course
      operationId: SetCourseVersionConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/versions/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    post:
      summary: Set configuration settings for all versions of this course.
      tags:
        - course
      operationId: SetCourseVersionsConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/versions/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    delete:
      summary: Clears the `settingId` value for all versions of this course.
      tags:
        - course
      operationId: DeleteCourseVersionsConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    delete:
      summary: Clears the `settingId` value for this course and version.
      tags:
        - course
      operationId: DeleteCourseVersionConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/importJobs/{importJobId}':
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: Check the status of an import job.
      tags:
        - course
      operationId: GetImportJobStatus
      parameters:
        - name: importJobId
          in: path
          required: true
          type: string
          description: >-
            Id received when the import job was submitted to the importJobs
            resource.
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ImportJobResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`importJobId` not found'
          schema:
            $ref: '#/definitions/ResponseErrorSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  /courses/importJobs/upload:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Upload a course and start an import job for it.
      description: >-
        An import job will be started to import the posted file, and the import
        job ID will be returned. If the import is successful, the imported
        course will be registered using the courseId provided.
      tags:
        - course
      operationId: CreateUploadAndImportCourseJob
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/importCourseId'
        - $ref: '#/parameters/mayCreateNewVersion'
        - $ref: '#/parameters/importFile'
        - $ref: '#/parameters/contentMetadata'
        - $ref: '#/parameters/uploadedContentType'
      responses:
        '200':
          description: ID of the created import job
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '409':
          description: 'conflict, `courseId` exists and `mayCreateNewVersion` is false'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  /courses/importJobs/noUpload:
    parameters:
      - $ref: '#/parameters/tenant'
  /courses/importJobs:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Start a job to fetch and import a course.
      description: >-
        An import job will be started to fetch and import the referenced file,
        and the import job ID will be returned. If the import is successful, the
        imported course will be registered using the courseId provided.
      tags:
        - course
      operationId: CreateFetchAndImportCourseJob
      parameters:
        - $ref: '#/parameters/importCourseId'
        - $ref: '#/parameters/mayCreateNewVersion'
        - name: importRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImportFetchRequestSchema'
      responses:
        '200':
          description: ID of the created import job
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '409':
          description: 'conflict, `courseId` exists and `mayCreateNewVersion` is false'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  /courses:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Create a course
      description: >-
        Import the specified course and return the results of the import. For
        large imports, it may be necessary to use importJobs instead to avoid
        timeouts.
      tags:
        - course
      operationId: ImportCourseWithoutUpload
      parameters:
        - $ref: '#/parameters/importCourseId'
        - $ref: '#/parameters/mayCreateNewVersion'
        - $ref: '#/parameters/importDryRun'
        - name: importRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImportRequestSchema'
      responses:
        '200':
          description: Result of the import request
          schema:
            $ref: '#/definitions/ImportResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '409':
          description: 'conflict, `courseId` exists and `mayCreateNewVersion` is false'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
    get:
      summary: Get a list of all courses for the specified tenant
      tags:
        - course
      operationId: GetCourses
      parameters:
        - $ref: '#/parameters/more'
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
        - $ref: '#/parameters/includeRegistrationCount'
        - $ref: '#/parameters/includeCourseMetadata'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CourseListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
  /courses/byId:
    parameters:
      - $ref: '#/parameters/tenant'
  /courses/upload:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Upload a course to import
      description: >-
        Upload and import the specified course and return the results of the
        import. For large imports, it may be necessary to use importJobs instead
        to avoid timeouts.
      tags:
        - course
      operationId: UploadAndImportCourse
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/importCourseId'
        - $ref: '#/parameters/mayCreateNewVersion'
        - $ref: '#/parameters/importDryRun'
        - $ref: '#/parameters/importFile'
        - $ref: '#/parameters/contentMetadata'
        - $ref: '#/parameters/uploadedContentType'
      responses:
        '200':
          description: Result of the import request
          schema:
            $ref: '#/definitions/ImportResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '409':
          description: 'conflict, `courseId` exists and `mayCreateNewVersion` is false'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/asset':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
    post:
      summary: Import an asset file for this course.
      tags:
        - course
      operationId: ImportCourseAssetFile
      parameters:
        - $ref: '#/parameters/updateAssetPolicy'
        - name: assetSchema
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImportAssetRequestSchema'
      responses:
        '200':
          description: The imported file and its destination path
          schema:
            $ref: '#/definitions/AssetFileSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
    get:
      summary: Get the specified asset in the current version of the specified course
      parameters:
        - name: relativePath
          description: Relative path of the asset within the course.
          in: query
          required: true
          type: string
      tags:
        - course
      produces:
        - application/octet-stream
      operationId: GetCourseAsset
      responses:
        '200':
          description: The course asset
          schema:
            type: file
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` or asset not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      summary: >-
        Delete the specified asset in the current version of the specified
        course
      parameters:
        - name: relativePath
          description: Relative path of the asset within the course.
          in: query
          required: true
          type: string
      tags:
        - course
      operationId: DeleteCourseAsset
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` or asset not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/asset/upload':
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Upload an asset file for this course.
      tags:
        - course
      operationId: UploadCourseAssetFile
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/courseId'
        - $ref: '#/parameters/importFile'
        - $ref: '#/parameters/destination'
        - $ref: '#/parameters/updateAssetPolicy'
      responses:
        '200':
          description: The imported file and its destination path
          schema:
            $ref: '#/definitions/AssetFileSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` version `versionId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/asset':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseId'
      - $ref: '#/parameters/versionId'
    post:
      summary: Import an asset file for this course version.
      tags:
        - course
      operationId: ImportCourseVersionAssetFile
      parameters:
        - $ref: '#/parameters/updateAssetPolicy'
        - name: assetSchema
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImportAssetRequestSchema'
      responses:
        '200':
          description: The imported file and its destination path
          schema:
            $ref: '#/definitions/AssetFileSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
    get:
      summary: Get the specified asset for this course version
      parameters:
        - name: relativePath
          description: Relative path of the asset within the course.
          in: query
          required: true
          type: string
      tags:
        - course
      produces:
        - application/octet-stream
      operationId: GetCourseVersionAsset
      responses:
        '200':
          description: The course asset
          schema:
            type: file
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` or asset not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:course'
        - basic: []
    delete:
      summary: >-
        Delete the specified asset in the current version of the specified
        course
      parameters:
        - name: relativePath
          description: Relative path of the asset within the course.
          in: query
          required: true
          type: string
      tags:
        - course
      operationId: DeleteCourseVersionAsset
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` or asset not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  '/courses/{courseId}/versions/{versionId}/asset/upload':
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      summary: Upload an asset file for this course version.
      tags:
        - course
      operationId: UploadCourseVersionAssetFile
      consumes:
        - multipart/form-data
      parameters:
        - $ref: '#/parameters/courseId'
        - $ref: '#/parameters/versionId'
        - $ref: '#/parameters/importFile'
        - $ref: '#/parameters/destination'
        - $ref: '#/parameters/updateAssetPolicy'
      responses:
        '200':
          description: The imported file and its destination path
          schema:
            $ref: '#/definitions/AssetFileSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`courseId` version `versionId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:course'
        - basic: []
  /dispatch/dispatches:
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/dispatchId'
  '/dispatch/dispatches/{dispatchId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/dispatchId'
  '/dispatch/dispatches/{dispatchId}/enabled':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/registrationCount':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/lti':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/launches':
    parameters:
      - $ref: '#/parameters/externalConfig'
  '/dispatch/dispatches/{dispatchId}/lti13':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/launchPage':
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/dispatches/{dispatchId}/zip':
    parameters:
      - $ref: '#/parameters/tenant'
  /dispatch/destinations:
    parameters:
      - $ref: '#/parameters/tenant'
  '/dispatch/destinations/{destinationId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/dispatches':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/dispatches/registrationInstancing':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/dispatches/enabled':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/lti13':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/lti13/deepLinkingRedirect': {}
  '/dispatch/destinations/{destinationId}/jwks':
    parameters:
      - $ref: '#/parameters/externalConfig'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/rotateKeys':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/oidcLoginInitiation':
    parameters:
      - $ref: '#/parameters/externalConfig'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/launches':
    parameters:
      - $ref: '#/parameters/destinationId'
      - name: externalConfig
        in: query
        required: false
        type: string
        description: Optional external configuration object
  '/dispatch/destinations/{destinationId}/registrationCount':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  '/dispatch/destinations/{destinationId}/dispatches/zip':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/destinationId'
  /dispatch/ltiReporters:
    parameters:
      - $ref: '#/parameters/tenant'
  /ping:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Get back a message indicating that the API is working.
      tags:
        - ping
      operationId: Ping
      responses:
        '200':
          description: ping response
          schema:
            $ref: '#/definitions/PingSchema'
      security:
        - oauth:
            - read
            - 'read:ping'
        - basic: []
  '/registrations/{registrationId}/instances':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    get:
      summary: >-
        Get all the instances of this the registration specified by the
        registration ID
      tags:
        - registration
      operationId: GetRegistrationInstances
      parameters:
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
        - $ref: '#/parameters/more'
        - $ref: '#/parameters/includeChildResults'
        - $ref: '#/parameters/includeInteractionsAndObjectives'
        - $ref: '#/parameters/includeRuntime'
      responses:
        '200':
          description: List of registration instances
          schema:
            $ref: '#/definitions/RegistrationListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    post:
      summary: >-
        Create a new instance for this registration specified by the
        registration ID
      tags:
        - registration
      operationId: CreateNewRegistrationInstance
      responses:
        '204':
          description: Created registration instance successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
    get:
      summary: Get registration progress for instance `instanceId` of `registrationId`
      tags:
        - registration
      operationId: GetRegistrationInstanceProgress
      parameters:
        - $ref: '#/parameters/includeChildResults'
        - $ref: '#/parameters/includeInteractionsAndObjectives'
        - $ref: '#/parameters/includeRuntime'
        - $ref: '#/parameters/createXapiRegistrationIdIfAbsent'
      responses:
        '200':
          description: Registration instance progress
          schema:
            $ref: '#/definitions/RegistrationSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    delete:
      summary: Delete instance `instanceId` of `registrationId`
      tags:
        - registration
      operationId: DeleteRegistrationInstance
      responses:
        '204':
          description: Deleted registration instance successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}/finalize':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
    post:
      summary: >-
        Set registration final progress for instance `instanceId` of
        `registrationId`. Registration or activity will be placed in review mode
        to prevent any more changes to this progress. This endpoint may be used
        for any learning standard, but in cmi5 it has the meaning of "waive"
        (see section 9.3.7 of the cmi5 specification for details on the Waived
        statement). In the case of cmi5, this endpoint requires `isCompleted`
        and `isPassed` to both be set to `true` for the waive operation.
      tags:
        - registration
      operationId: FinalizeRegistrationInstanceProgress
      parameters:
        - $ref: '#/parameters/activityId'
        - $ref: '#/parameters/registrationFinalState'
      responses:
        '204':
          description: Registration instance progress finalized successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}/xAPIStatements':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
      - $ref: '#/parameters/since'
      - $ref: '#/parameters/until'
      - $ref: '#/parameters/more'
    get:
      summary: Get xAPI statements for instance `instanceId` of `registrationId`
      tags:
        - registration
      operationId: GetRegistrationInstanceStatements
      responses:
        '200':
          description: Registration instance statements
          schema:
            $ref: '#/definitions/XapiStatementResult'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
    get:
      summary: Returns all configuration settings for this registration instance
      tags:
        - registration
      operationId: GetRegistrationInstanceConfiguration
      parameters:
        - $ref: '#/parameters/includeMetadata'
        - $ref: '#/parameters/includeHidden'
        - $ref: '#/parameters/includeSecret'
        - $ref: '#/parameters/processReplacementTokens'
      responses:
        '200':
          description: Configuration settings for this registration
          schema:
            $ref: '#/definitions/SettingListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    post:
      summary: Set configuration settings for this registration instance.
      tags:
        - registration
      operationId: SetRegistrationInstanceConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
    delete:
      summary: Clears the `settingId` value for this registration instance
      tags:
        - registration
      operationId: DeleteRegistrationInstanceConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/launchLink':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    post:
      summary: Returns the link to use to launch this registration
      tags:
        - registration
      operationId: BuildRegistrationLaunchLink
      parameters:
        - name: launchLinkRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/LaunchLinkRequestSchema'
      responses:
        '200':
          description: The launch link
          schema:
            $ref: '#/definitions/LaunchLinkSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
  '/registrations/{registrationId}/progress':
    parameters:
      - $ref: '#/parameters/tenant'
    delete:
      summary: delete registration progress (clear registration)
      tags:
        - registration
      operationId: DeleteRegistrationProgress
      parameters:
        - $ref: '#/parameters/registrationId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:registration'
        - basic: []
  '/registrations/{registrationId}/globalData':
    parameters:
      - $ref: '#/parameters/tenant'
    delete:
      summary: delete global data associated with `registrationId`
      tags:
        - registration
      operationId: DeleteRegistrationGlobalData
      parameters:
        - $ref: '#/parameters/registrationId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:registration'
        - basic: []
  '/registrations/{registrationId}/instances/{instanceId}/launchHistory':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/instanceId'
    get:
      summary: Returns history of this registration's launches
      tags:
        - registration
      operationId: GetRegistrationInstanceLaunchHistory
      parameters:
        - name: includeHistoryLog
          in: query
          required: false
          default: false
          type: boolean
          description: Whether to include the history log in the launch history
      responses:
        '200':
          description: The launch history
          schema:
            $ref: '#/definitions/LaunchHistoryListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
  '/registrations/{registrationId}/launchHistory':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    get:
      summary: Returns history of this registration's launches
      tags:
        - registration
      operationId: GetRegistrationLaunchHistory
      parameters:
        - name: includeHistoryLog
          in: query
          required: false
          default: false
          type: boolean
          description: Whether to include the history log in the launch history
      responses:
        '200':
          description: The launch history
          schema:
            $ref: '#/definitions/LaunchHistoryListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
  '/registrations/{registrationId}/xAPIStatements':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
      - $ref: '#/parameters/since'
      - $ref: '#/parameters/until'
      - $ref: '#/parameters/more'
    get:
      summary: Get xAPI statements for `registrationId`
      tags:
        - registration
      operationId: GetRegistrationStatements
      responses:
        '200':
          description: Registration statements
          schema:
            $ref: '#/definitions/XapiStatementResult'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
  '/registrations/{registrationId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    head:
      summary: Does this registration exist?
      tags:
        - registration
      operationId: GetRegistration
      responses:
        '200':
          description: Registration exists
        '400':
          description: bad request
        '404':
          description: '`registrationId` not found'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    get:
      summary: Get registration progress for `registrationId`
      tags:
        - registration
      operationId: GetRegistrationProgress
      parameters:
        - $ref: '#/parameters/includeChildResults'
        - $ref: '#/parameters/includeInteractionsAndObjectives'
        - $ref: '#/parameters/includeRuntime'
        - $ref: '#/parameters/createXapiRegistrationIdIfAbsent'
      responses:
        '200':
          description: Registration Progress
          schema:
            $ref: '#/definitions/RegistrationSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    delete:
      summary: Delete `registrationId`
      tags:
        - registration
      operationId: DeleteRegistration
      parameters:
        - $ref: '#/parameters/registrationId'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/ResponseErrorSchema'
      security:
        - oauth:
            - delete
            - 'delete:registration'
        - basic: []
  '/registrations/{registrationId}/finalize':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    post:
      summary: >-
        Set registration's or activity's final progress for `registrationId`.
        Registration or activity will be placed in review mode to prevent any
        more changes to this progress. This endpoint may be used for any
        learning standard, but in cmi5 it has the meaning of "waive" (see
        section 9.3.7 of the cmi5 specification for details on the Waived
        statement). In the case of cmi5, this endpoint requires `isCompleted`
        and `isPassed` to both be set to `true` for the waive operation.
      tags:
        - registration
      operationId: FinalizeRegistrationProgress
      parameters:
        - $ref: '#/parameters/activityId'
        - $ref: '#/parameters/registrationFinalState'
      responses:
        '204':
          description: Registration progress finalized successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  /registrations:
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: >-
        Gets a list of registrations including a summary of the status of each
        registration.
      description: >-
        The 'since' parameter exists to allow retrieving only registrations that
        have changed.
      tags:
        - registration
      operationId: GetRegistrations
      parameters:
        - name: courseId
          in: query
          required: false
          type: string
          description: Only registrations for the specified course id will be included.
        - $ref: '#/parameters/learnerId'
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/until'
        - $ref: '#/parameters/more'
        - $ref: '#/parameters/includeChildResults'
        - $ref: '#/parameters/includeInteractionsAndObjectives'
        - $ref: '#/parameters/includeRuntime'
      responses:
        '200':
          description: List of registrations
          schema:
            $ref: '#/definitions/RegistrationListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    post:
      summary: Create a registration.
      tags:
        - registration
      operationId: CreateRegistration
      parameters:
        - $ref: '#/parameters/courseVersion'
        - name: registration
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRegistrationSchema'
      responses:
        '204':
          description: Created registration successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  /registrations/withLaunchLink:
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/courseVersion'
    post:
      summary: Creates a registration and returns the link to use to launch it
      tags:
        - registration
      operationId: CreateRegistrationWithLaunchLink
      parameters:
        - name: createRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRegistrationWithLaunchLinkSchema'
      responses:
        '200':
          description: The launch link
          schema:
            $ref: '#/definitions/LaunchLinkSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  /registrations/byId:
    parameters:
      - $ref: '#/parameters/tenant'
  '/registrations/{registrationId}/abandon':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    post:
      summary: >-
        Abandon all sessions for `registrationId`. Currently only cmi5 session
        abandon is supported. For cmi5, section 9.3.6 of the specification
        allows for an activity to indicate an abnormal termination by a
        learner's action or due to a system failure. This endpoint thus allows
        for an activity to mark the session belonging to the specified
        registration as abandoned.
      tags:
        - registration
      operationId: AbandonRegistrationSessions
      responses:
        '204':
          description: Registration sessions abandoned successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/configuration/{settingId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    delete:
      summary: Clears the `settingId` value for this registration
      tags:
        - registration
      operationId: DeleteRegistrationConfigurationSetting
      parameters:
        - name: settingId
          in: path
          required: true
          type: string
      responses:
        '204':
          description: Cleared setting successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  '/registrations/{registrationId}/configuration':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/registrationId'
    get:
      summary: Returns all configuration settings for this registration
      tags:
        - registration
      operationId: GetRegistrationConfiguration
      parameters:
        - $ref: '#/parameters/includeMetadata'
        - $ref: '#/parameters/includeHidden'
        - $ref: '#/parameters/includeSecret'
        - $ref: '#/parameters/processReplacementTokens'
      responses:
        '200':
          description: Configuration settings for this registration
          schema:
            $ref: '#/definitions/SettingListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:registration'
        - basic: []
    post:
      summary: Set configuration settings for this registration.
      tags:
        - registration
      operationId: SetRegistrationConfiguration
      parameters:
        - name: configurationSettings
          in: body
          required: true
          schema:
            $ref: '#/definitions/SettingsPostSchema'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`registrationId` was not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:registration'
        - basic: []
  /registrations/ltiBasicOutcomes:
    post:
      summary: Endpoint for LTI basic outcomes
      tags:
        - registration
      operationId: ltiBasicOutcomes
      consumes:
        - application/xml
      produces:
        - application/xml
      parameters:
        - name: outcomesRequest
          in: body
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Outcomes Response
          schema:
            type: string
  /xapi/credentials:
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: Get a list of all xAPI credentials
      tags:
        - xapi
      operationId: GetXapiCredentials
      parameters:
        - $ref: '#/parameters/more'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/XapiCredentialsListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:xapicredential'
        - basic: []
    post:
      summary: Create an xAPI credential
      tags:
        - xapi
      operationId: CreateXapiCredential
      parameters:
        - name: xapiCredential
          in: body
          required: true
          schema:
            $ref: '#/definitions/XapiCredentialPostSchema'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:xapicredential'
        - basic: []
  '/xapi/credentials/{xapiCredentialId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/xapiCredentialId'
    get:
      summary: Retrieves the xAPI credential specified by id `xapiCredentialId`
      tags:
        - xapi
      operationId: GetXapiCredential
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/XapiCredentialSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`xapiCredentialsId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:xapicredential'
        - basic: []
    put:
      summary: >-
        Either edits an existing xAPI credential or creates a new one, specified
        by id `xapiCredentialId`
      tags:
        - xapi
      operationId: SetXapiCredential
      parameters:
        - $ref: '#/parameters/xapiCredentialId'
        - name: xapiCredential
          in: body
          required: true
          schema:
            $ref: '#/definitions/XapiCredentialPutSchema'
      responses:
        '204':
          description: The creation or edit of the xAPI credential was successful
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`xapiCredentialId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:xapicredential'
        - basic: []
    delete:
      summary: Deletes the xAPI credential specified with the id `xapiCredentialId`
      tags:
        - xapi
      operationId: DeleteXapiCredential
      parameters:
        - $ref: '#/parameters/xapiCredentialId'
      responses:
        '204':
          description: The xAPI credential with id `xapiCredentialsId` was deleted
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`xapiCredentialsId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:xapicredential'
        - basic: []
  /xapi/statementPipes:
    parameters:
      - $ref: '#/parameters/tenant'
    get:
      summary: Get a list of all xAPI statement pipes
      tags:
        - xapi
      operationId: GetStatementPipes
      responses:
        '200':
          description: Success. Returning a list of statement pipes.
          schema:
            $ref: '#/definitions/XapiStatementPipeListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:xapipipe'
        - basic: []
    post:
      summary: Create an xAPI statement pipe.
      tags:
        - xapi
      operationId: CreateStatementPipe
      parameters:
        - name: xapiStatementPipe
          in: body
          required: true
          schema:
            $ref: '#/definitions/XapiStatementPipePostSchema'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:xapipipe'
        - basic: []
  '/xapi/statementPipes/{statementPipeId}':
    parameters:
      - $ref: '#/parameters/tenant'
      - $ref: '#/parameters/statementPipeId'
    get:
      summary: Retrieves xAPI statement pipe specified by id `statementPipeId.`
      tags:
        - xapi
      operationId: GetStatementPipe
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/XapiStatementPipeSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`statementPipeId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - read
            - 'read:xapipipe'
        - basic: []
    put:
      summary: >-
        Either edits an existing xAPI statement pipe or creates a new one,
        specified by id `statementPipeId`
      description: >-
        Editing a statement pipe's url will cause it to start over and forward
        any statements it finds, even if the prior version of the pipe had
        already forwarded those statements.
      tags:
        - xapi
      operationId: SetStatementPipe
      parameters:
        - name: xapiStatementPipe
          in: body
          required: true
          schema:
            $ref: '#/definitions/XapiStatementPipePutSchema'
      responses:
        '204':
          description: The creation or edit of the xAPI statement pipe was successful
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`statementPipeId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
        '409':
          description: 'conflict, statement pipe is currently being processed'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - write
            - 'write:xapipipe'
        - basic: []
    delete:
      summary: Deletes the xAPI statement pipe specified with the id `statementPipeId`
      description: >-
        Caution: avoid re-creating a statement pipe with the same ID quickly
        after a delete. The old version could still be processing, in which case
        the new pipe could be updated improperly by the processor.
      tags:
        - xapi
      operationId: DeleteStatementPipe
      responses:
        '204':
          description: The xAPI statement pipe with id `xapiPipeId` was deleted
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`xapiPipeId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - oauth:
            - delete
            - 'delete:xapipipe'
        - basic: []
  /contentConnectors:
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Get content connectors
      description: >-
        Gets list of connectors, for the specified tenant, or connectors that
        apply to all tenants if tenant is not specified.
      tags:
        - contentConnectors
      operationId: GetConnectorsList
      parameters:
        - name: includeAdditionalInstanceInformation
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: List of connectors
          schema:
            $ref: '#/definitions/ConnectorListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:connector'
    post:
      summary: Create a connector
      description: >-
        Creates a connector for the specified tenant, or a system-wide connector
        if tenant is not specified.
      tags:
        - contentConnectors
      operationId: CreateConnector
      parameters:
        - name: Connector
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateConnectorSchema'
      responses:
        '200':
          description: ID of the created connector
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:connector'
  '/contentConnectors/{connectorId}':
    parameters:
      - $ref: '#/parameters/optionalTenant'
      - $ref: '#/parameters/connectorId'
    put:
      summary: Update a connector
      description: Update the specified connector.
      tags:
        - contentConnectors
      operationId: UpdateConnector
      parameters:
        - name: Connector
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateConnectorSchema'
      responses:
        '204':
          description: Updated connector successfully
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`connectorId` not found'
          schema:
            $ref: '#/definitions/MessageSchema'
      security:
        - basic: []
        - oauth:
            - admin
            - 'admin:connector'
  /contentConnectors/remoteSearch:
    post:
      summary: search remote content
      description: >
        Searches the remote content available, either for all connectors, or for
        only a specific connector if specified. If tenant is specified, this is
        the list of content for that tenant, if not, it is only content
        available through connectors configured for the whole system (not
        connectors configured for other tenants)
      tags:
        - contentConnectors
      operationId: SearchRemoteConnectorContent
      parameters:
        - $ref: '#/parameters/optionalTenant'
        - name: SearchInfo
          in: body
          required: true
          schema:
            $ref: '#/definitions/ConnectorContentSearchSchema'
      responses:
        '200':
          description: List of available content
          schema:
            $ref: '#/definitions/ConnectorContentListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:connectorContent'
        - basic: []
  /contentConnectors/availableContent:
    parameters:
      - $ref: '#/parameters/optionalTenant'
      - $ref: '#/parameters/connectorIdQuery'
    get:
      summary: Get list of available content
      description: >
        Gets the list of content available, either for all connectors, or for
        only a specific connector if specified. If tenant is specified, this is
        the list of content for that tenant, if not, it is only content
        available through connectors configured for the whole system (not
        connectors configured for other tenants)
      tags:
        - contentConnectors
      operationId: GetConnectorContentList
      parameters:
        - $ref: '#/parameters/since'
        - $ref: '#/parameters/more'
        - name: notImported
          in: query
          required: false
          default: false
          type: boolean
        - name: search
          in: query
          required: false
          type: string
        - name: includeAllMetadata
          in: query
          required: false
          default: false
          type: boolean
      responses:
        '200':
          description: List of available content
          schema:
            $ref: '#/definitions/ConnectorContentListSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:connectorContent'
        - basic: []
  /contentConnectors/availableContent/refreshJobs:
    post:
      summary: Start a job to refresh the list of available content
      description: >
        Starts a job to refresh the list of content available, either for all
        connectors, or for only a specific connector if specified. If a tenant
        is specified, then this is this list of content for that tenant. If a
        tenant is not specified, then the list will only contain content
        available through connectors configured for the whole system (not
        connectors configured for other tenants)
      tags:
        - contentConnectors
      operationId: RefreshConnectorContentListJob
      parameters:
        - $ref: '#/parameters/optionalTenant'
        - $ref: '#/parameters/connectorIdQuery'
      responses:
        '200':
          description: ID of the created refresh job
          schema:
            $ref: '#/definitions/StringResultSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:connectorContent'
        - basic: []
  '/contentConnectors/availableContent/refreshJobs/{refreshJobId}':
    parameters:
      - $ref: '#/parameters/optionalTenant'
    get:
      summary: Check the status of a refresh job.
      tags:
        - contentConnectors
      operationId: GetRefreshJobStatus
      parameters:
        - name: refreshJobId
          in: path
          required: true
          type: string
          description: >-
            The Id received when the refresh job was submitted to the
            refreshJobs resource.
      responses:
        '200':
          description: List of results for the refresh job
          schema:
            $ref: '#/definitions/RefreshConnectorResultListSchema'
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          description: '`refreshJobId` not found'
          schema:
            $ref: '#/definitions/ResponseErrorSchema'
      security:
        - oauth:
            - read
            - 'read:connectorContent'
        - basic: []
  /player/configuration:
    parameters:
      - $ref: '#/parameters/tenant'
    post:
      tags:
        - player
      summary: Returns player configuration
      operationId: BuildPlayerConfiguration
      produces:
        - application/javascript
      parameters:
        - name: PlayerConfigurationSchema
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerConfigurationSchema'
      responses:
        '200':
          description: Player configuration generated successfully
          schema:
            $ref: '#/definitions/PlayerConfigurationResultsSchema'
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:player'
  /player/results:
    post:
      tags:
        - player
      summary: Endpoint for player to send results
      parameters:
        - $ref: '#/parameters/tenant'
        - name: PlayerResultsSchema
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlayerResultsSchema'
      operationId: PostPlayerResults
      responses:
        '204':
          description: Results submitted successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:player'
  /player/zip:
    parameters:
      - $ref: '#/parameters/optionalTenant'
      - name: player
        in: query
        default: modern
        type: string
        enum:
          - MODERN
    get:
      tags:
        - player
      summary: Gets the customized player files for this system
      operationId: GetPlayerZip
      produces:
        - application/zip
      responses:
        '200':
          description: ''
          schema:
            type: file
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - read
            - 'read:player'
    delete:
      tags:
        - player
      summary: Deletes the current exported player zip
      operationId: DeletePlayerZip
      responses:
        '204':
          description: Player zip deleted successfully
        '400':
          $ref: '#/responses/BadRequest'
      security:
        - oauth:
            - write
            - 'write:player'
responses:
  BadRequest:
    description: bad request
    schema:
      $ref: '#/definitions/MessageSchema'
definitions:
  MessageSchema:
    title: messageSchema
    type: object
    properties:
      message:
        type: string
    required:
      - message
  IntegerResultSchema:
    title: integerResultSchema
    type: object
    properties:
      result:
        type: integer
        format: int32
    required:
      - result
  ResponseErrorSchema:
    title: ResponseErrorSchema
    type: object
    properties:
      message:
        type: string
    required:
      - message
  StringResultSchema:
    title: stringResultSchema
    type: object
    properties:
      result:
        type: string
    required:
      - result
  ItemValuePairSchema:
    title: itemValuePairSchema
    type: object
    properties:
      item:
        type: string
      value:
        type: string
  EnabledSchema:
    title: enabledSchema
    type: object
    properties:
      enabled:
        type: boolean
  IdListSchema:
    title: idListSchema
    type: object
    properties:
      ids:
        type: array
        items:
          type: string
  PlayerInfoSchema:
    title: playerInfoSchema
    type: object
    properties:
      exportedHash:
        type: string
  AboutPlayerSchema:
    title: aboutPlayerSchema
    type: object
    properties:
      modern:
        $ref: '#/definitions/PlayerInfoSchema'
  AboutSchema:
    title: aboutSchema
    type: object
    properties:
      version:
        type: string
      player:
        $ref: '#/definitions/AboutPlayerSchema'
      platform:
        type: string
      distribution:
        type: string
      integration:
        description: >-
          Integration class. Only relevant to some customers with Engine
          installations from before the 2015 release.
        type: string
      contentConnectorTypes:
        type: array
        items:
          $ref: '#/definitions/ConnectorTypeSchema'
      plugins:
        type: array
        items:
          $ref: '#/definitions/PluginInformationSchema'
      validScopes:
        type: array
        items:
          type: string
    required:
      - version
      - platform
  RegistrationCountSummarySchema:
    title: registrationCountSummarySchema
    type: object
    properties:
      combinedTenants:
        $ref: '#/definitions/RegistrationCountDetailSchema'
      byTenant:
        type: array
        items:
          $ref: '#/definitions/RegistrationCountDetailSchema'
    required:
      - byTenant
  RegistrationCountDetailSchema:
    title: registrationCountDetailSchema
    type: object
    properties:
      tenantName:
        type: string
      total:
        type: integer
        format: int32
      dispatched:
        type: integer
        format: int32
      nonDispatched:
        type: integer
        format: int32
  UserCountSummarySchema:
    title: userCountSummarySchema
    type: object
    properties:
      combinedTenants:
        $ref: '#/definitions/UserCountDetailSchema'
      byTenant:
        type: array
        items:
          $ref: '#/definitions/UserCountDetailSchema'
    required:
      - byTenant
  UserCountDetailSchema:
    title: userCountDetailSchema
    type: object
    properties:
      tenantName:
        type: string
      total:
        type: integer
        format: int32
      dispatched:
        type: integer
        format: int32
      nonDispatched:
        type: integer
        format: int32
    required:
      - total
  ConnectorTypeSchema:
    title: ConnectorTypeSchema
    description: An installed content connector type.
    type: object
    properties:
      contentConnectorType:
        type: string
        description: type of content connector
      version:
        $ref: '#/definitions/PluginVersionSchema'
      name:
        type: string
        description: name of this content connector type
      enabled:
        type: boolean
        description: >-
          Is there an enabled instance of this connector for the specified
          tenant (or at the system level)
  PluginInformationSchema:
    title: PluginInformationSchema
    description: Describes the installed plugin.
    type: object
    properties:
      pluginType:
        type: string
        description: type of plugin
      version:
        $ref: '#/definitions/PluginVersionSchema'
      installed:
        type: boolean
      info:
        type: object
    required:
      - pluginType
  PluginVersionSchema:
    title: PluginVersionSchema
    description: Information about the version of an installed plugin
    type: object
    properties:
      plugin:
        type: string
        description: version of this plugin
      engine:
        type: string
        description: the version of Engine with which this plugin was built
  SettingListSchema:
    title: settingListSchema
    type: object
    properties:
      settingItems:
        type: array
        items:
          title: settingItem
          type: object
          properties:
            id:
              type: string
            effectiveValue:
              type: string
              description: >-
                The value of this setting that would be used if read at this
                level, including defaults, fallback, and values set at less
                specific levels.
            effectiveValueSource:
              type: string
              description: >-
                The source of this effective value, default, fallback, or the
                level the value was set at.
              enum:
                - default
                - conditionalDefault
                - fallback
                - base
                - system
                - learningStandard
                - tenant
                - learningStandardForTenant
                - dispatchDestination
                - course
                - dispatchDestinationForCourse
                - registration
                - dispatch
            explicitValue:
              type: string
              description: >-
                The value of this setting that is explicitly set at this level.
                If not present, the setting is not specified at this level.
            metadata:
              title: settingMetadata
              type: object
              properties:
                default:
                  type: string
                  description: Default value of this setting
                dataType:
                  type: string
                  description: The data type of this setting
                settingDescription:
                  type: string
                  description: description of this setting
                level:
                  type: string
                  description: >-
                    The level this setting will be applied at, which limits
                    where it can be set. For example, WebPathToContentRoot is
                    applied at the tenant level, so it's not valid to set it for
                    a registration.
                learningStandards:
                  description: >-
                    The list of learning standards this setting applies to. If
                    not present, this setting is not limited to certain learning
                    standards.
                  type: array
                  items:
                    type: string
                fallback:
                  type: string
                  description: >-
                    A setting that will be used instead of this setting if no
                    value is provided for this setting (This is similar to a
                    default, except that the the value of another setting is
                    being used instead of a fixed default value)
                validValues:
                  description: >-
                    For settings with a fixed list of valid values, the list of
                    those values
                  type: array
                  items:
                    title: settingValidValue
                    type: object
                    properties:
                      value:
                        type: string
                      valueDescription:
                        type: string
                        description: >-
                          Description of what this valid value means, how it
                          will be applied if used in a setting
    required:
      - settingItems
  SettingsPostSchema:
    title: settingsPostSchema
    type: object
    properties:
      settings:
        type: array
        items:
          $ref: '#/definitions/SettingsIndividualSchema'
  SettingsIndividualSchema:
    title: settingsIndividualSchema
    type: object
    properties:
      settingId:
        type: string
      value:
        type: string
      explicit:
        type: boolean
        default: false
        description: >-
          Whether or not Engine will save a configuration setting even if the
          same value would be inherited from a broader level.
    example:
      settingId: PlayerScoLaunchType
      value: NEW_WINDOW
  PermissionsSchema:
    title: permissionsSchema
    type: object
    properties:
      scopes:
        type: array
        items:
          description: a scope
          type: string
      tenantName:
        type: string
        description: tenant these permissions apply to
      courseId:
        type: string
        description: course these permissions apply to
      registrationId:
        type: string
        description: registration these permissions apply to
  CredentialSchema:
    title: credentialSchema
    type: object
    properties:
      id:
        type: string
        description: id for this credential
      name:
        type: string
        description: name for this credential
      permissions:
        $ref: '#/definitions/PermissionsSchema'
  CredentialListSchema:
    title: credentialListSchema
    type: array
    items:
      $ref: '#/definitions/CredentialSchema'
  CredentialRequestSchema:
    title: credentialRequestSchema
    type: object
    properties:
      name:
        type: string
        description: name for this credential
      permissions:
        $ref: '#/definitions/PermissionsSchema'
  CredentialCreatedSchema:
    title: credentialCreatedSchema
    type: object
    properties:
      id:
        type: string
        description: id for this credential
      name:
        type: string
        description: name for this credential
      secret:
        type: string
        description: Secret for this credential. Only available upon creation.
  TokenRequestSchema:
    title: TokenRequestSchema
    type: object
    properties:
      permissions:
        $ref: '#/definitions/PermissionsSchema'
      expiry:
        type: string
        format: date-time
        description: >-
          Expiration of the token. This should not be set far in the future, as
          there is no way to invalidate an individual token.
      id:
        type: string
        description: 'Unique ID for this token, for access logging.'
      additionalValues:
        description: Additional values to be included in the token
        type: array
        items:
          $ref: '#/definitions/ItemValuePairSchema'
    required:
      - expiry
      - permissions
  TokenInfoSchema:
    title: TokenInfoSchema
    type: object
    properties:
      permissions:
        $ref: '#/definitions/PermissionsSchema'
      expiry:
        type: string
        format: date-time
        description: Expiration of the token.
      additionalValues:
        description: Additional values that were included in the token
        type: array
        items:
          $ref: '#/definitions/ItemValuePairSchema'
  TenantSchema:
    title: TenantSchema
    type: object
    properties:
      name:
        type: string
        description: name of the tenant
      active:
        type: boolean
        description: is the tenant active
  TenantListSchema:
    title: TenantListSchema
    type: object
    properties:
      tenants:
        type: array
        items:
          $ref: '#/definitions/TenantSchema'
  PIIDeletionRequestSchema:
    title: PIIDeletionRequestSchema
    type: object
    properties:
      learnerIds:
        type: array
        items:
          type: string
      agents:
        type: array
        items:
          type: object
  PIIDeletionRequestResultSchema:
    title: PIIDeletionRequestResultSchema
    type: object
    properties:
      jobId:
        type: string
  PIIDeletionResultSchema:
    title: PIIDeletionResultSchema
    type: object
    properties:
      jobId:
        type: string
      message:
        type: string
      jobStatus:
        title: jobStatus
        type: string
        enum:
          - RUNNING
          - COMPLETE
          - ERROR
          - TIMEOUT
  SubscriptionAuthDefinitionSchema:
    title: SubscriptionAuthDefinitionSchema
    type: object
    properties:
      subscriptionAuthType:
        type: string
        enum:
          - Oauth2ClientCredentials
          - HMACSHA256
          - HMACSHA512
          - Basic
      key:
        type: string
        description: key / username / client ID depending on auth mode
      secret:
        type: string
        description: >-
          password or secret depending on auth mode. For HMAC, this is the
          base64 of the secret
      scope:
        type: string
        description: OAuth2 scope
      tokenUrl:
        type: string
        description: OAuth2 authorization endpoint
    required:
      - subscriptionAuthType
  SubscriptionDefinitionSchema:
    title: SubscriptionDefinitionSchema
    type: object
    properties:
      topic:
        type: string
        description: Topic to subscribe to
        enum:
          - CourseImport
          - CourseLaunched
          - RegistrationChanged
          - NotificationFailed
          - XapiGetAuthority
      subtopics:
        type: array
        description: >-
          Topic dependent list of sub-topics for which the subscriber should be
          notified. Eg: 'success' or 'failed' for course import
        items:
          type: string
      enabled:
        type: boolean
      url:
        type: string
      authId:
        type: string
        description: >-
          The ID for the subscription auth entry to use to authorize requests
          for this subscription.
      timeoutMS:
        type: integer
        format: int32
        description: Network timeout in milliseconds for sending subscription
      asyncMode:
        description: >-
          Will this Notification be sent in a thread, or synchronously? Note:
          Synchronous delivery should be used sparingly as it may severely
          degrade performance. Has no effect on Exchanges.
        type: string
        enum:
          - Thread
          - Sync
      strictOrdering:
        description: >-
          Should Engine keep track of notification ordering and drop out of date
          notifications? Note: Ordering notifications should be used sparingly
          as it may severly degrade performance. Has no effect on Exchanges.
        type: boolean
        example: 'false'
      expiresMS:
        description: >-
          For how long (in ms) should Engine cache the response to this
          Exchange. Has no effect on Notifications.
        type: integer
        format: int32
      retryAttempts:
        description: >-
          The number of times Engine will attempt to send after a failure. Takes
          the lower value between this and the `SimpleQueueMaxRetries`
          configuration setting.
        type: integer
        format: int32
      retryDelaySeconds:
        description: >-
          The initial length of time Engine will wait before retrying after a
          failure. This time will be doubled after each retry. Takes the greater
          value between this and the `SimpleQueueRetryInitialDelaySeconds`
          configuration setting.
        type: integer
        format: int32
      ignoreBeforeDate:
        description: Queued messages generated before this date will be discarded.
        type: string
        format: date-time
      filters:
        type: array
        description: >-
          Filters on resources such as course, registration, or tenant for which
          this subscriber should be notified. If multiple filters are defined,
          only events that match all the filters will trigger a notification.
        items:
          type: object
          properties:
            target:
              description: List of valid resources to which filters can be applied.
              type: string
              enum:
                - CourseId
                - LearningStandard
                - Tenant
                - RegistrationId
                - SubscriptionId
            matches:
              type: array
              description: >-
                List of matches for specified target. At least one match is
                required. If multiple matches are defined, the filter applies if
                any match.
              items:
                description: >-
                  RegEx indicated by enclosing '/' or literal to match against
                  target
                type: string
          required:
            - target
            - matches
    required:
      - topic
      - url
      - enabled
  SubscriptionAuthEntrySchema:
    title: SubscriptionAuthEntrySchema
    type: object
    properties:
      id:
        type: string
        description: Subscription Authentication ID
      definition:
        $ref: '#/definitions/SubscriptionAuthDefinitionSchema'
  SubscriptionEntrySchema:
    title: SubscriptionEntrySchema
    type: object
    properties:
      id:
        type: string
        description: Subscription ID
      lastUpdate:
        type: string
        format: date-time
        description: The last time the subscription was updated
      definition:
        $ref: '#/definitions/SubscriptionDefinitionSchema'
      lastExceptionReference:
        type: string
        description: The exception reference from the most recent failure
      lastExceptionDate:
        type: string
        format: date-time
        description: The timestamp of the most recent failure
  SubscriptionAuthListSchema:
    title: SubscriptionAuthListSchema
    type: object
    properties:
      authEntries:
        type: array
        items:
          $ref: '#/definitions/SubscriptionAuthEntrySchema'
      more:
        type: string
  SubscriptionListSchema:
    title: SubscriptionListSchema
    type: object
    properties:
      subscriptions:
        type: array
        items:
          $ref: '#/definitions/SubscriptionEntrySchema'
      more:
        type: string
  CourseListSchema:
    title: courseListSchema
    type: object
    properties:
      courses:
        type: array
        items:
          $ref: '#/definitions/CourseSchema'
      more:
        type: string
  CourseListNonPagedSchema:
    title: courseListNonPagedSchema
    type: object
    properties:
      courses:
        type: array
        items:
          $ref: '#/definitions/CourseSchema'
    example:
      id: 52aabfb2-bc37-412c-a1aa-9aa6921d4356
      title: Golf Explained - Run-time Advanced Calls
      updated: '2021-07-15T21:06:51.797Z'
      webPath: /courses/default/52aabfb2-bc37-412c-a1aa-9aa6921d4356/0
      version: '0'
      activityId: golf_sample_default_org
      courseLearningStandard: SCORM20043RDEDITION
      launchable: true
  CourseReferenceSchema:
    title: courseReferenceSchema
    type: object
    description: >-
      Basic information about a course for when a course is referenced by other
      objects, such as a registration.
    properties:
      id:
        type: string
      title:
        type: string
      version:
        type: integer
        format: int32
      courseReferenceLearningStandard:
        title: CourseReferenceLearningStandard
        type: string
        enum:
          - SCORM11
          - SCORM12
          - SCORM20042NDEDITION
          - SCORM20043RDEDITION
          - SCORM20044THEDITION
          - AICC
          - XAPI
          - CMI5
          - LTI11
          - LTI13
  CourseSchema:
    title: courseSchema
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      xapiActivityId:
        type: string
        description: xAPI activity id associated with this course
      updated:
        type: string
        format: date-time
      webPath:
        type: string
        description: >-
          The web path at which the course's contents are hosted. For AICC
          courses, refer to the href property of the child activities as this
          value will not be available.
      version:
        type: integer
        format: int32
      registrationCount:
        type: integer
        format: int32
      activityId:
        type: string
      courseLearningStandard:
        title: CourseLearningStandard
        type: string
        enum:
          - SCORM11
          - SCORM12
          - SCORM20042NDEDITION
          - SCORM20043RDEDITION
          - SCORM20044THEDITION
          - AICC
          - XAPI
          - CMI5
          - LTI11
          - LTI13
      launchable:
        type: boolean
        default: true
        description: >-
          Always 'true' except for courses created by the xAPI On-Demand
          Registrations process which are only there as a placeholder. If
          'false', this course does not have the necessary information to be
          launched.
      connector:
        $ref: '#/definitions/CourseConnectorSchema'
      metadata:
        $ref: '#/definitions/MetadataSchema'
      rootActivity:
        $ref: '#/definitions/CourseActivitySchema'
  MetadataSchema:
    title: metadataSchema
    type: object
    properties:
      title:
        type: string
      titleLanguage:
        type: string
      description:
        type: string
      descriptionLanguage:
        type: string
      duration:
        type: string
      typicalTime:
        type: string
      keywords:
        type: array
        items:
          type: string
      pluginSpecificMetadata:
        type: object
      additionalMetadata:
        type: object
  CourseConnectorSchema:
    title: courseConnectorSchema
    type: object
    properties:
      connectorId:
        type: string
      connectorIdForContent:
        type: string
      connectorName:
        type: string
  ImportJobResultSchema:
    title: importJobResultSchema
    type: object
    properties:
      jobId:
        type: string
      status:
        title: Status
        type: string
        enum:
          - RUNNING
          - COMPLETE
          - ERROR
          - TIMEOUT
      message:
        type: string
      isDryRun:
        type: boolean
      importResult:
        $ref: '#/definitions/ImportResultSchema'
  ImportResultSchema:
    title: importResultSchema
    type: object
    properties:
      webPathToCourse:
        description: web path to this course
        type: string
      parserWarnings:
        type: array
        items:
          type: string
      courseLanguages:
        type: array
        items:
          type: string
      course:
        $ref: '#/definitions/CourseSchema'
  ImportRequestSchema:
    title: importRequestSchema
    description: >-
      Request to import a new course. Exactly one of fetchRequest,
      referenceRequest, mediaFileReferenceRequest, connectorReferenceRequest,
      adHocReferenceRequest, or lti11LinkReferenceRequest must be supplied,
      depending on the desired import behavior.
    type: object
    properties:
      fetchRequest:
        $ref: '#/definitions/ImportFetchRequestSchema'
      referenceRequest:
        $ref: '#/definitions/ImportReferenceRequestSchema'
      mediaFileReferenceRequest:
        $ref: '#/definitions/ImportMediaFileReferenceRequestSchema'
      connectorReferenceRequest:
        $ref: '#/definitions/ImportConnectorRequestSchema'
      adHocReferenceRequest:
        $ref: '#/definitions/ImportAdHocReferenceRequestSchema'
      lti11LinkReferenceRequest:
        $ref: '#/definitions/ImportLti11LinkReferenceRequestSchema'
  ConnectorImportRequestSchema:
    title: importRequestSchema
    description: >-
      Request to import a new course via content connector. Exactly one of
      fetchRequest, mediaFileReferenceRequest, lti11LinkReferenceRequest, or
      lti13LinkReferenceRequest must be supplied, depending on the desired
      import behavior.
    type: object
    properties:
      fetchRequest:
        $ref: '#/definitions/ImportFetchRequestSchema'
      mediaFileReferenceRequest:
        $ref: '#/definitions/ImportMediaFileReferenceRequestSchema'
      lti11LinkReferenceRequest:
        $ref: '#/definitions/ImportLti11LinkReferenceRequestSchema'
      lti13LinkReferenceRequest:
        $ref: '#/definitions/ImportLti13LinkReferenceRequestSchema'
  ImportFetchRequestSchema:
    title: importFetchRequestSchema
    description: Request to import a course by fetching it from a url
    type: object
    properties:
      url:
        description: URL path to the content to fetch to import this course.
        type: string
      contentType:
        description: >-
          MIME type that corresponds to the course content type. Supported types
          include application/zip, application/pdf, audio/mpeg, and video/mp4.
          The default value is application/zip.
        type: string
      mediaFileMetadata:
        $ref: '#/definitions/MediaFileMetadataSchema'
    required:
      - url
  ImportMediaFileReferenceRequestSchema:
    title: importMediaFileReferenceRequestSchema
    description: >-
      Request to import a course by referencing existing media file content that
      is already available at the URL where it will be used.
    type: object
    properties:
      url:
        description: URL path to the content to reference when playing this course.
        type: string
      contentType:
        description: >-
          Content type for the course; supported values include 'audio/mpeg',
          'video/mp4', 'application/pdf' and 'url'.
        type: string
      mediaFileMetadata:
        $ref: '#/definitions/MediaFileMetadataSchema'
    required:
      - url
      - contentType
  ImportLti11LinkReferenceRequestSchema:
    title: importLti11LinkReferenceRequestSchema
    description: Request to import an LTI link
    type: object
    properties:
      url:
        description: Launch URL of the tool provider
        type: string
      key:
        description: Consumer key credential to access LTI link
        type: string
      sharedSecret:
        description: Consumer secret credential to access LTI link
        type: string
      title:
        description: Title for the referenced link
        type: string
      ltiLinkMetadata:
        $ref: '#/definitions/LtiLinkMetadataSchema'
    required:
      - key
      - sharedSecret
      - url
      - title
  ImportLti13LinkReferenceRequestSchema:
    title: importLti13LinkReferenceRequestSchema
    description: Request to import an LTI 1.3 link
    type: object
    properties:
      url:
        description: Launch URL of the resource link
        type: string
      title:
        description: Title for the referenced link
        type: string
      ltiLinkMetadata:
        $ref: '#/definitions/LtiLinkMetadataSchema'
    required:
      - title
      - url
  ImportReferenceRequestSchema:
    title: importReferenceRequestSchema
    description: >-
      Request to import a course by referencing existing content that is already
      available at the url where it will be used.
    type: object
    properties:
      url:
        description: URL path to the manifest that defines this course
        type: string
      webPathToCourse:
        description: >-
          This is the URL to the root of the course, where the course content is
          already available.
        type: string
      mediaFileMetadata:
        $ref: '#/definitions/MediaFileMetadataSchema'
    required:
      - url
      - webPathToCourse
  ImportConnectorRequestSchema:
    title: importConnectorRequestSchema
    description: Request to import a course that is available via a content connector.
    type: object
    properties:
      connectorId:
        type: string
      connectorIdForContent:
        description: The id the connector provides to identify this content.
        type: string
      metadataForConnector:
        description: 'The metadata for this connector, format is implementation specific'
        type: object
    required:
      - connectorId
  LtiLinkMetadataSchema:
    title: ltiLinkMetadataSchema
    description: >-
      Schema that defines optional metadata values for LTI 1.1 and 1.3 link
      content
    type: object
    properties:
      description:
        description: Description of the referenced link's content
        type: string
      context:
        description: >-
          Schema that defines the context (group of related content, such as a
          course) the link being imported belongs to
        type: object
        properties:
          contextId:
            description: >-
              Unique, opaque identifier for the context. For LTI 1.3, this
              identifier must not exceed 255 ASCII characters and must be
              provided if any other context claims are also provided.
            type: string
          contextTitle:
            description: Title for the context
            type: string
          contextLabel:
            description: 'Short identifier for the context, such as a course code'
            type: string
          contextType:
            description: >
              The type of context the referenced link belongs to. Per LTI
              specifications, if this parameter is present the array must
              include at least one known context type for that LTI version. It
              may include other context types but by best practice they should
              be fully-qualified URNs (for LTI 1.1) or fully-qualified URIs (for
              LTI 1.3). Valid context type values for LTI 1.1 are:
              urn:lti:context-type:ims/lis/CourseOffering, CourseOffering,
              urn:lti:context-type:ims/lis/CourseSection, CourseSection,
              urn:lti:context-type:ims/lis/CourseTemplate, CourseTemplate,
              urn:lti:context-type:ims/lis/Group, Group. Valid context type
              values for LTI 1.3 are
              http://purl.imsglobal.org/vocab/lis/v2/course#CourseOffering,
              http://purl.imsglobal.org/vocab/lis/v2/course#CourseSection,
              http://purl.imsglobal.org/vocab/lis/v2/course#CourseTemplate,
              http://purl.imsglobal.org/vocab/lis/v2/course#Group.
            type: array
            items:
              type: string
      customParameters:
        description: >-
          Custom parameters that will be included with the launch of the link.
          Per LTI specifications, if importing a version 1.1 link, the keys will
          be mapped to lowercase and all non-alphanumeric characters will be
          replaced with `_`
        type: array
        items:
          $ref: '#/definitions/ItemValuePairSchema'
  MediaFileMetadataSchema:
    title: mediaFileMetadataSchema
    description: >-
      Schema that includes metadata properties that can be used during course
      import. Note: this schema has an unfortunate name. Originally, this schema
      was only associated with Media File content; however, it has since been
      applied to other import resources. The type name wasn't changed to protect
      against regression conflicts.
    type: object
    properties:
      title:
        description: Title for the referenced course content.
        type: string
      description:
        description: >-
          Description of the referenced course content. For media file content,
          the default value is an empty string.
        type: string
      contentLanguage:
        description: >-
          An RFC 5646 compliant language code that specifies the content's
          language. For media file content, the default value is 'en'.
        type: string
      moveOn:
        description: >-
          Value of the cmi5 'moveOn' property for the referenced course content.
          Possible values are: Passed, Completed, CompletedAndPassed,
          CompletedOrPassed, and NotApplicable. For media file content, the
          default value is 'Completed'. This property is only applicable with
          the following learning standards: cmi5, MediaFile.
        type: string
      estimatedDuration:
        description: Estimated number of seconds required to complete the course.
        type: integer
        format: int32
      activityType:
        description: >-
          The IRI activity type of the media content. If not provided,
          reasonable default values will be assumed based on the content's
          'contentType'. This property is only applicable with the following
          learning standards: MediaFile.
        type: string
      xAPIActivityId:
        description: >-
          The xAPI activity ID associated with this course. This property is
          only applicable with the following learning standards: SCORM, AICC,
          MediaFile.
        type: string
      cmi5PublisherId:
        description: >-
          The publisher ID for a cmi5 course. This property is only applicable
          with the following learning standards: cmi5, MediaFile.
        type: string
      additionalMetadata:
        description: Additional arbitrary metadata associated with this course.
        type: object
  ImportAdHocReferenceRequestSchema:
    description: >-
      Request to import a course by referencing existing content where the
      course content is already available but does not have a manifest
      available, but is instead to be defined in this request.
    type: object
    properties:
      learningStandard:
        description: The learning standard for the course to import.
        type: string
      title:
        description: The title of the course to import.
        type: string
      launchUrl:
        description: >-
          URL to the specific content file to launch when this course is
          launched.
        type: string
        example: 'http://example.org/content/course123/index.html'
      xapiActivityId:
        description: >-
          The xApi activity ID associated with this course. In general, this can
          be omitted if this course is not 'using xAPI and following the Tin Can
          launch guidelines'.
        type: string
      cmi5PublisherId:
        description: >-
          The publisher ID for a CMI5 course. This can be omitted if the
          learning standard is not CMI5.
        type: string
      webPathToCourse:
        description: >-
          This is the URL to the root of the course, where the course content is
          already available.
        type: string
    required:
      - learningStandard
      - title
      - launchUrl
      - webPathToCourse
  TitleSchema:
    title: titleSchema
    type: object
    properties:
      title:
        type: string
  LinkSchema:
    title: linkSchema
    type: object
    properties:
      link:
        type: string
    required:
      - link
  CourseActivitySchema:
    title: courseActivitySchema
    type: object
    properties:
      externalIdentifier:
        type: string
        description: >
          An arbitrary identifier that the external LMS system can associate
          with this LearningObject to track it as it isreused across courses
      itemIdentifier:
        type: string
        description: The string which identifies this activity in the context of its course
      resourceIdentifier:
        type: string
        description: >-
          The string which identifies this activity's resource in a course's
          manifest
      activityType:
        type: string
        description: The type of activity this is
        enum:
          - UNKNOWN
          - AGGREGATION
          - SCO
          - ASSET
          - OBJECTIVE
      href:
        type: string
        description: The web path used to launch this activity
      scaledPassingScore:
        type: string
        description: The score required of a learner to pass this activity
      title:
        type: string
        description: The title of the activity
      children:
        type: array
        items:
          $ref: '#/definitions/CourseActivitySchema'
  AssetFileSchema:
    title: assetFileSchema
    type: object
    properties:
      filename:
        type: string
      destination:
        type: string
  ImportAssetRequestSchema:
    title: importAssetRequestSchema
    description: Request schema to import a course asset file by fetching it from a url
    type: object
    properties:
      fetchUrl:
        description: URL path to the asset file to import.
        type: string
      destination:
        description: >-
          Path, relative to the course's Content Directory, that indicates where
          to store the fetched asset file.
        type: string
    required:
      - fetchUrl
      - destination
  FileListSchema:
    title: fileListSchema
    type: object
    properties:
      files:
        type: array
        items:
          title: fileListItemSchema
          type: object
          properties:
            path:
              type: string
              description: relative file path
            size:
              type: integer
              format: int64
              description: file size in bytes
            modified:
              type: string
              format: date-time
  CreateDispatchListSchema:
    title: CreateDispatchListSchema
    type: object
    properties:
      dispatches:
        type: array
        items:
          $ref: '#/definitions/CreateDispatchIdSchema'
  CreateDispatchIdSchema:
    title: CreateDispatchIdSchema
    type: object
    properties:
      id:
        type: string
      data:
        $ref: '#/definitions/CreateDispatchSchema'
    required:
      - id
      - data
  DispatchIdSchema:
    title: dispatchIdSchema
    type: object
    properties:
      id:
        type: string
      data:
        $ref: '#/definitions/DispatchSchema'
    required:
      - id
      - data
  DispatchListSchema:
    title: dispatchListSchema
    type: object
    properties:
      dispatches:
        type: array
        items:
          $ref: '#/definitions/DispatchIdSchema'
      more:
        type: string
  DispatchIdListSchema:
    title: DispatchIdListSchema
    type: object
    properties:
      ids:
        type: array
        items:
          type: string
  DispatchRegistrationCountSchema:
    title: registrationCountSchema
    type: object
    properties:
      registrationCount:
        type: integer
        format: int32
      lastResetDate:
        type: string
        format: date-time
  DispatchLtiInfoSchema:
    title: ltiInfoSchema
    type: object
    properties:
      url:
        description: The LTI launch URL for this dispatch
        type: string
      consumerKey:
        description: >-
          The OAuth consumer key that identifies the tool consumer for this
          dispatch.
        type: string
      sharedSecret:
        description: The OAuth secret to be used for LTI authentication for this dispatch.
        type: string
    required:
      - url
      - consumerKey
      - sharedSecret
  DispatchLti13InfoSchema:
    title: lti13InfoSchema
    type: object
    properties:
      targetLinkUri:
        description: Endpoint executed at the end of the OIDC authentication flow.
        type: string
  CreateDispatchSchema:
    title: CreateDispatchSchema
    type: object
    properties:
      destinationId:
        description: Destination Id
        type: string
      courseId:
        description: Serialized external package ID.
        type: string
      allowNewRegistrations:
        description: 'If true, then new registrations can be created for this dispatch.'
        type: boolean
        default: true
      instanced:
        description: >-
          If true, then a new registration instance will be created if the
          client LMS doesn't provide launch data for an existing one. Otherwise,
          the same instance will always be used for the given cmi.learner_id.
        type: boolean
        default: true
      registrationCap:
        description: >-
          The maximum number of registrations that can be created for this
          dispatch, where '0' means 'unlimited registrations'.
        type: integer
        format: int32
        default: 0
      expirationDate:
        description: >-
          The date after which this dispatch will be disabled as an ISO 8601
          string, or not present for no expiration date.
        type: string
        format: date-time
        default: ''
      enabled:
        description: 'If true, then this dispatch can be launched.'
        type: boolean
        default: true
    required:
      - destinationId
      - courseId
  UpdateDispatchSchema:
    title: UpdateDispatchSchema
    type: object
    properties:
      allowNewRegistrations:
        description: 'If true, then new registrations can be created for this dispatch.'
        type: boolean
      instanced:
        description: >-
          If true, then a new registration instance will be created if the
          client LMS doesn't provide launch data for an existing one. Otherwise,
          the same instance will always be used for the given cmi.learner_id.
        type: boolean
      registrationCap:
        description: >-
          The maximum number of registrations that can be created for this
          dispatch, where '0' means 'unlimited registrations'.
        type: integer
        format: int32
      expirationDate:
        description: >-
          The date after which this dispatch will be disabled as an ISO 8601
          string.
        type: string
        format: date-time
      enabled:
        description: 'If true, then this dispatch can be launched.'
        type: boolean
  DispatchSchema:
    title: DispatchSchema
    type: object
    properties:
      destinationId:
        description: Destination Id
        type: string
      courseId:
        description: Serialized external package ID.
        type: string
      allowNewRegistrations:
        description: 'If true, then new registrations can be created for this dispatch.'
        type: boolean
        default: false
      instanced:
        description: >-
          If true, then a new registration instance will be created if the
          client LMS doesn't provide launch data for an existing one. Otherwise,
          the same instance will always be used for the given cmi.learner_id.
        type: boolean
        default: false
      registrationCap:
        description: >-
          The maximum number of registrations that can be created for this
          dispatch, where '0' means 'unlimited registrations'.
        type: integer
        format: int32
        default: 0
      expirationDate:
        description: >-
          The date after which this dispatch will be disabled as an ISO 8601
          string, or not present for no expiration date.
        type: string
        format: date-time
        default: ''
      enabled:
        description: 'If true, then this dispatch can be launched.'
        type: boolean
        default: false
      registrationCount:
        description: The number of registrations created for this dispatch.
        type: integer
        format: int32
        default: 0
      registrationResetDate:
        description: >-
          The date the dispatch registration count was reset to 0 as an ISO 8601
          string, or not present for no expiration date.
        type: string
        format: date-time
        default: ''
    required:
      - destinationId
      - courseId
  DestinationListSchema:
    title: destinationListSchema
    type: object
    properties:
      destinations:
        type: array
        items:
          $ref: '#/definitions/DestinationIdSchema'
      more:
        type: string
    required:
      - destinations
  CreateDestinationListSchema:
    title: createDestinationListSchema
    type: object
    properties:
      destinations:
        type: array
        items:
          $ref: '#/definitions/DestinationIdSchema'
    required:
      - destinations
  DestinationIdSchema:
    title: destinationIdSchema
    type: object
    properties:
      id:
        type: string
      data:
        $ref: '#/definitions/DestinationSchema'
    required:
      - id
      - data
  DestinationSchema:
    title: destinationSchema
    type: object
    properties:
      name:
        type: string
      lti13Data:
        $ref: '#/definitions/Lti13PlatformConfigurationSchema'
    required:
      - name
  Lti13PlatformConfigurationSchema:
    title: lti13PlatformConfigurationSchema
    type: object
    properties:
      clientId:
        type: string
        description: OAuth2 client Id for this tool
      platformIssuerIdentifier:
        type: string
        description: Issuer identifier identifying the learning platform
      deploymentId:
        type: string
        description: >-
          An unchanging identifier (locally unique within the
          platformIssuerIdentifier) for the platform-tool integration
      oidcAuthorizationEndpoint:
        type: string
        description: Endpoint that will initiate the OIDC Authentication Request
      jsonWebKeySetUrl:
        type: string
        description: Path to the platform's JSON Web Key Set
      accessTokenUrl:
        type: string
        description: Endpoint that will return OAuth 2 access tokens for the platform
    required:
      - clientId
      - platformIssuerIdentifier
      - deploymentId
      - jsonWebKeySetUrl
      - oidcAuthorizationEndpoint
  Lti13ToolConfigurationSchema:
    title: lti13ToolConfigurationSchema
    type: object
    properties:
      publicKey:
        type: string
        description: Public key for LTI 1.3 tool
      oidcLoginInitiationsUrl:
        type: string
        description: Endpoint where the OIDC Authorization flow will be initiated
      redirectUri:
        type: string
        description: Endpoint where the OIDC Authorization Response should be sent
      jsonWebKeySetUrl:
        type: string
        description: Path to the tool's JSON Web Key Set
    required:
      - publicKey
      - oidcLoginInitiationsUrl
      - redirectUri
      - jsonWebKeySetUrl
  RegistrationInstancingSchema:
    title: enableRegInstancing
    type: object
    properties:
      enabled:
        type: boolean
  LaunchPageResponseSchema:
    title: launchPageResponseSchema
    type: object
    properties:
      launchUrl:
        description: >-
          The Engine launch URL for the dispatch registration, or null if there
          was an error.
        type: string
    required:
      - launchUrl
  OAuthCredentialsSchema:
    title: oauthCredentialsSchema
    type: object
    properties:
      consumerKey:
        description: the OAuth consumer key
        type: string
      sharedSecret:
        description: the OAuth shared secret
        type: string
    required:
      - consumerKey
      - sharedSecret
  LtiReporterSchema:
    title: ltiReporterSchema
    type: object
    properties:
      sourcedId:
        type: string
        description: The LTI sourced ID associated with the launch
      version:
        type: string
        description: The version of LTI reporting to use (1.0 or 1.1).
      outcomeUrl:
        type: string
        description: The URL to which LTI results will be posted.
      credentials:
        $ref: '#/definitions/OAuthCredentialsSchema'
    required:
      - sourcedId
      - version
      - outcomeUrl
      - credentials
  LtiReporterIdSchema:
    title: ltiReporterIdSchema
    type: object
    properties:
      ltiReporterId:
        type: string
        description: The ID of the LTI reporter that was just created.
    required:
      - ltiReporterId
  RotateKeysSchema:
    title: RotateKeys
    type: object
    properties:
      expiry:
        type: string
        format: date-time
    required:
      - expiry
  JsonWebKeySetSchema:
    title: JsonWebKeySet
    type: object
    properties:
      keys:
        type: array
        items:
          type: object
          properties:
            kty:
              type: string
            e:
              type: string
            'n':
              type: string
            kid:
              type: string
            alg:
              type: string
            use:
              type: string
  PingSchema:
    title: PingSchema
    type: object
    properties:
      apiMessage:
        type: string
      currentTime:
        type: string
      databaseMessage:
        type: string
  LaunchLinkSchema:
    title: launchLinkSchema
    type: object
    properties:
      launchLink:
        type: string
    required:
      - launchLink
  LaunchLinkRequestSchema:
    title: launchLinkRequestSchema
    type: object
    properties:
      expiry:
        default: 120
        type: integer
        format: int32
        description: >-
          The number of seconds from now that this link will expire in. This
          parameter should only be specified if the setting
          'ApiUseSignedLaunchLinks' is configured with a value of 'true'.
      redirectOnExitUrl:
        type: string
        description: >-
          The URL the application should redirect to when the learner exits a
          course. If not specified, configured value will be used.
      tracking:
        type: boolean
        default: true
        description: >-
          Should this launch be tracked? If false, Engine will avoid tracking to
          the extent possible for the standard being used.
      startSco:
        type: string
        description: >-
          For SCORM, SCO identifier to override launch, overriding the normal
          sequencing.
      additionalValues:
        type: array
        items:
          $ref: '#/definitions/ItemValuePairSchema'
    example:
      expiry: 10
      redirectOnExitUrl: 'https://example.org/myapp/courseDetail/12345'
      additionalValues:
        - item: cc
          value: en-US
  CreateRegistrationWithLaunchLinkSchema:
    title: createRegistrationWithLaunchLinkSchema
    type: object
    properties:
      registration:
        $ref: '#/definitions/CreateRegistrationSchema'
        description: New registration for this launch link.
      launchLink:
        $ref: '#/definitions/LaunchLinkRequestSchema'
        description: Launch link request.
  LaunchHistoryListSchema:
    title: launchHistoryListSchema
    type: object
    properties:
      launchHistory:
        type: array
        items:
          $ref: '#/definitions/LaunchHistorySchema'
  LaunchHistorySchema:
    title: launchHistorySchema
    type: object
    properties:
      id:
        type: string
        description: Identifier for the registration associated with this record
      instance:
        type: integer
        format: int32
      score:
        $ref: '#/definitions/ScoreSchema'
      completionStatus:
        type: string
        default: UNKNOWN
        enum:
          - UNKNOWN
          - COMPLETED
          - INCOMPLETE
      successStatus:
        type: string
        default: UNKNOWN
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
      historyLog:
        type: string
      totalSecondsTracked:
        type: number
        format: double
      launchTime:
        type: string
        format: date-time
        description: The time of the launch in UTC
      exitTime:
        type: string
        format: date-time
        description: The time of the exit in UTC
      lastRuntimeUpdate:
        type: string
        format: date-time
        description: The time of the last runtime update in UTC
      launchHistoryId:
        type: string
        description: A unique identifier for this launch history record
      forcedExit:
        type: boolean
        description: Was the previous exit forced due to a concurrent launch
  RegistrationListSchema:
    title: registrationListSchema
    type: object
    properties:
      registrations:
        type: array
        items:
          $ref: '#/definitions/RegistrationSchema'
      more:
        type: string
    required:
      - registrations
  FinalizeRegistrationProgressSchema:
    title: finalizeRegistrationProgressSchema
    type: object
    description: >-
      The schema for the client to send to the API to finalize a registration's
      progress for a course or activity
    properties:
      isCompleted:
        title: IsCompleted
        type: boolean
        description: >-
          If provided, sets final completion status to completed (true) or
          incomplete (false)
      isPassed:
        title: IsPassed
        type: boolean
        description: >-
          If provided, sets final success status to passed (true) or failed
          (false)
      score:
        $ref: '#/definitions/ScoreSchema'
      totalSecondsTracked:
        type: number
        format: double
        description: >-
          If provided, sets final tracked time (how long the course or activity
          took to complete)
      updateReason:
        type: string
        enum:
          - TestOut
          - Equivalent
          - ExternalEquivalent
          - Administrative
          - Other
        default: Administrative
        description: >-
          The reason why this was finalized. Possible reasons are: tested out
          (TestOut), or completed an equivalent activity within this course
          (Equivalent), or completed an equivalent activity outside of this
          course (ExternalEquivalent), or an administrator has marked this as
          complete (Administrative), or another reason (Other). Note that Other
          is not a valid reason for cmi5 because cmi5 requires the waived reason
          to be one of the four reasons defined in the cmi5 specification.
          Otherwise, the Other reason may be used with the other learning
          standards.
  RegistrationSchema:
    title: registrationSchema
    type: object
    properties:
      id:
        type: string
      instance:
        type: integer
        format: int32
      xapiRegistrationId:
        type: string
        description: xAPI registration id associated with this registration
      lti13SubjectIdentifier:
        type: string
        description: >-
          Identifier for the registration that will be sent to the LTI 1.3 tool
          during launch in the 'sub' claim. Corresponds to the 'userId'
          parameter in the Assignment and Grade Service endpoints
      lti13CustomClaims:
        type: object
      dispatchId:
        type: string
        description: 'Dispatch ID for this registration, if applicable'
      updated:
        type: string
        format: date-time
      registrationCompletion:
        title: RegistrationCompletion
        type: string
        enum:
          - UNKNOWN
          - COMPLETED
          - INCOMPLETE
        default: UNKNOWN
      registrationSuccess:
        title: RegistrationSuccess
        type: string
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
        default: UNKNOWN
      score:
        $ref: '#/definitions/ScoreSchema'
      totalSecondsTracked:
        type: number
        format: double
      firstAccessDate:
        type: string
        format: date-time
      lastAccessDate:
        type: string
        format: date-time
      completedDate:
        type: string
        format: date-time
      createdDate:
        type: string
        format: date-time
      course:
        $ref: '#/definitions/CourseReferenceSchema'
      learner:
        $ref: '#/definitions/LearnerSchema'
      globalObjectives:
        type: array
        items:
          $ref: '#/definitions/ObjectiveSchema'
      activityDetails:
        $ref: '#/definitions/ActivityResultSchema'
      sharedData:
        type: array
        items:
          $ref: '#/definitions/SharedDataEntrySchema'
      suspendedActivityId:
        type: string
      registrationCompletionAmount:
        description: >
          A decimal value between 0 and 1 representing the percentage of this
          course that the learner has completed so far, if known. Note: for
          learning standards other than SCORM 2004 4th Edition, this value is
          based on the percentage of activities completed/passed. This means
          that single-activity courses in those standards will always return
          either 0 or 1.
        type: number
        format: double
  SharedDataEntrySchema:
    title: sharedDataEntrySchema
    type: object
    properties:
      id:
        type: string
      value:
        type: string
  ScoreSchema:
    title: scoreSchema
    type: object
    properties:
      scaled:
        description: Scaled score between 0 and 100
        type: number
        format: double
  LearnerSchema:
    title: learnerSchema
    type: object
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
  ObjectiveSchema:
    title: objectiveSchema
    type: object
    properties:
      id:
        type: string
      primary:
        type: boolean
      score:
        $ref: '#/definitions/ScoreSchema'
      scoreMax:
        type: number
        format: double
      scoreMin:
        type: number
        format: double
      scoreRaw:
        type: number
        format: double
      previousScoreScaled:
        type: number
        format: double
      firstScoreScaled:
        type: number
        format: double
      progressMeasure:
        type: number
        format: double
      firstSuccessTimeStamp:
        type: string
      objectiveCompletion:
        title: ObjectiveCompletion
        type: string
        enum:
          - UNKNOWN
          - COMPLETED
          - INCOMPLETE
        default: UNKNOWN
      objectiveSuccess:
        title: ObjectiveSuccess
        type: string
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
        default: UNKNOWN
      previousObjectiveSuccess:
        title: PreviousObjectiveSuccess
        type: string
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
        default: UNKNOWN
  ActivityResultSchema:
    title: activityResultSchema
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      attempts:
        type: integer
        format: int32
      activityCompletion:
        title: ActivityCompletion
        type: string
        enum:
          - UNKNOWN
          - COMPLETED
          - INCOMPLETE
      activitySuccess:
        title: ActivitySuccess
        type: string
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
      score:
        $ref: '#/definitions/ScoreSchema'
      timeTracked:
        type: string
      completionAmount:
        $ref: '#/definitions/CompletionAmountSchema'
      suspended:
        type: boolean
      children:
        type: array
        items:
          $ref: '#/definitions/ActivityResultSchema'
      objectives:
        type: array
        items:
          $ref: '#/definitions/ObjectiveSchema'
      staticProperties:
        $ref: '#/definitions/StaticPropertiesSchema'
      runtime:
        $ref: '#/definitions/RuntimeSchema'
  CompletionAmountSchema:
    title: completionAmountSchema
    type: object
    properties:
      scaled:
        description: Scaled completion amount between 0 and 100
        type: number
        format: double
  StaticPropertiesSchema:
    title: staticPropertiesSchema
    type: object
    properties:
      completionThreshold:
        type: string
      launchData:
        type: string
      maxTimeAllowed:
        type: string
      scaledPassingScore:
        type: number
        format: double
      scaledPassingScoreUsed:
        type: boolean
      timeLimitAction:
        type: string
  RuntimeSchema:
    title: runtimeSchema
    type: object
    properties:
      completionStatus:
        type: string
      credit:
        type: string
      entry:
        type: string
      exit:
        type: string
      learnerPreference:
        $ref: '#/definitions/LearnerPreferenceSchema'
      location:
        type: string
      mode:
        type: string
      progressMeasure:
        type: string
      scoreScaled:
        type: string
      scoreRaw:
        type: string
      scoreMin:
        type: string
      scoreMax:
        type: string
      totalTime:
        type: string
      timeTracked:
        type: string
      runtimeSuccessStatus:
        type: string
        default: UNKNOWN
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
      suspendData:
        type: string
      learnerComments:
        type: array
        items:
          $ref: '#/definitions/CommentSchema'
      lmsComments:
        type: array
        items:
          $ref: '#/definitions/CommentSchema'
      runtimeInteractions:
        type: array
        items:
          $ref: '#/definitions/RuntimeInteractionSchema'
      runtimeObjectives:
        type: array
        items:
          $ref: '#/definitions/RuntimeObjectiveSchema'
  LearnerPreferenceSchema:
    title: learnerPreferenceSchema
    type: object
    properties:
      audioLevel:
        type: number
        format: double
      language:
        type: string
      deliverySpeed:
        type: number
        format: double
      audioCaptioning:
        type: integer
        format: int32
  CommentSchema:
    title: commentSchema
    type: object
    properties:
      value:
        type: string
      location:
        type: string
      dateTime:
        type: string
  RuntimeInteractionSchema:
    title: runtimeInteractionSchema
    type: object
    properties:
      id:
        type: string
      type:
        type: string
        enum:
          - TrueFalse
          - Choice
          - FillIn
          - LongFillIn
          - Likert
          - Matching
          - Performance
          - Sequencing
          - Numeric
          - Other
      objectives:
        type: array
        items:
          type: string
      timestamp:
        type: string
      timestampUtc:
        type: string
      correctResponses:
        type: array
        items:
          type: string
      weighting:
        type: string
      learnerResponse:
        type: string
      result:
        type: string
      latency:
        type: string
      description:
        type: string
  RuntimeObjectiveSchema:
    title: runtimeObjectiveSchema
    type: object
    properties:
      id:
        type: string
      scoreScaled:
        type: string
      scoreMin:
        type: string
      scoreMax:
        type: string
      scoreRaw:
        type: string
      runtimeObjectiveSuccessStatus:
        type: string
        default: UNKNOWN
        enum:
          - UNKNOWN
          - PASSED
          - FAILED
      runtimeObjectiveCompletionStatus:
        type: string
        default: UNKNOWN
        enum:
          - UNKNOWN
          - COMPLETED
          - INCOMPLETE
          - NOT_ATTEMPTED
          - BROWSED
      progressMeasure:
        type: string
      description:
        type: string
  CreateRegistrationSchema:
    title: createRegistrationSchema
    type: object
    properties:
      courseId:
        type: string
      learner:
        $ref: '#/definitions/LearnerSchema'
      registrationId:
        type: string
      forCredit:
        type: boolean
        default: true
      xapiRegistrationId:
        type: string
      postBack:
        $ref: '#/definitions/PostBackSchema'
      initialRegistrationState:
        $ref: '#/definitions/RegistrationSchema'
      initialSettings:
        $ref: '#/definitions/SettingsPostSchema'
    required:
      - courseId
      - learner
      - registrationId
    example:
      courseId: 52aabfb2-bc37-412c-a1aa-9aa6921d4356
      learner:
        id: 3d044e26-74ce-4133-9a1c-54b584422b8e
        firstName: Joe
        lastName: Scormy
      registrationId: b6d35e91-3531-468e-a0fb-7b2bebe5f9d9
  PostBackSchema:
    title: postBack
    type: object
    properties:
      url:
        type: string
      authType:
        title: AuthType
        type: string
        enum:
          - UNDEFINED
          - FORM
          - HTTPBASIC
        default: UNDEFINED
      userName:
        description: >-
          The user name to be used in authorizing the postback of data to the
          URL specified by postback url.
        type: string
      password:
        description: >-
          The password to be used in authorizing the postback of data to the URL
          specified by postback url.
        type: string
      resultsFormat:
        title: ResultsFormat
        type: string
        enum:
          - UNDEFINED
          - COURSE
          - ACTIVITY
          - FULL
        default: UNDEFINED
  XapiCredentialSchema:
    title: xapiCredentialSchema
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      info:
        type: string
      secret:
        type: string
      isEnabled:
        type: boolean
      auth:
        $ref: '#/definitions/XapiCredentialAuthTypeSchema'
      permissionsLevel:
        $ref: '#/definitions/XapiCredentialPermissionsLevelSchema'
    required:
      - name
      - secret
      - isEnabled
      - auth
      - permissionsLevel
  XapiCredentialPutSchema:
    title: xapiCredentialPutSchema
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      info:
        type: string
      secret:
        type: string
      isEnabled:
        type: boolean
      auth:
        $ref: '#/definitions/XapiCredentialAuthTypeSchema'
      permissionsLevel:
        $ref: '#/definitions/XapiCredentialPermissionsLevelSchema'
  XapiCredentialAuthTypeSchema:
    title: xapiCredentialAuthTypeSchema
    type: object
    properties:
      xapiCredentialAuthType:
        title: XapiCredentialAuthType
        type: string
        enum:
          - BASICAUTH
          - OAUTH
  XapiCredentialPermissionsLevelSchema:
    title: xapiCredentialPermissionsLevelSchema
    type: object
    properties:
      xapiCredentialPermissionsLevel:
        title: XapiCredentialPermissionsLevel
        type: string
        enum:
          - USER
          - ROOT
          - READONLY
          - WRITEONLY
  XapiCredentialsListSchema:
    title: xapiCredentialsListSchema
    type: object
    properties:
      xapiCredentials:
        type: array
        items:
          $ref: '#/definitions/XapiCredentialSchema'
      more:
        type: string
    required:
      - xapiCredentials
  XapiCredentialPostSchema:
    title: xapiCredentialPostSchema
    type: object
    properties:
      name:
        type: string
      info:
        type: string
      secret:
        type: string
      isEnabled:
        type: boolean
      auth:
        $ref: '#/definitions/XapiCredentialAuthTypeSchema'
      permissionsLevel:
        $ref: '#/definitions/XapiCredentialPermissionsLevelSchema'
    required:
      - name
      - secret
      - isEnabled
      - auth
      - permissionsLevel
  XapiEndpointSchema:
    title: xapiEndpointSchema
    type: object
    properties:
      url:
        type: string
      userName:
        type: string
      password:
        type: string
    required:
      - password
  XapiStatementPipeSchema:
    title: xapiStatementPipeSchema
    type: object
    properties:
      id:
        type: string
      lastForwardedStatementDate:
        type: string
      moreUrl:
        type: string
      attempts:
        type: integer
        format: int32
      visibleAfter:
        type: string
      source:
        $ref: '#/definitions/XapiEndpointSchema'
      target:
        $ref: '#/definitions/XapiEndpointSchema'
      localSource:
        $ref: '#/definitions/XapiSelfSourcedPipeSchema'
  XapiStatementPipePutSchema:
    title: xapiStatementPipePutSchema
    type: object
    properties:
      source:
        $ref: '#/definitions/XapiEndpointSchema'
      target:
        $ref: '#/definitions/XapiEndpointSchema'
      localSource:
        $ref: '#/definitions/XapiSelfSourcedPipeSchema'
  XapiStatementPipeListSchema:
    title: xapiStatementPipeListSchema
    type: object
    properties:
      xapiStatementPipes:
        type: array
        items:
          $ref: '#/definitions/XapiStatementPipeSchema'
    required:
      - xapiStatementPipes
  XapiStatementPipePostSchema:
    title: xapiStatementPipePostSchema
    type: object
    properties:
      source:
        $ref: '#/definitions/XapiEndpointSchema'
      target:
        $ref: '#/definitions/XapiEndpointSchema'
      localSource:
        $ref: '#/definitions/XapiSelfSourcedPipeSchema'
    required:
      - target
  XapiSelfSourcedPipeSchema:
    title: xapiSelfSourcedPipeSchema
    type: object
    properties:
      params:
        type: array
        items:
          $ref: '#/definitions/ItemValuePairSchema'
  XapiAccount:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4124-account-object'
    type: object
    properties:
      homePage:
        type: string
      name:
        type: string
    required:
      - homePage
      - name
  XapiActivity:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4141-when-the-objecttype-is-activity
    type: object
    properties:
      objectType:
        type: string
        default: Activity
      id:
        type: string
      definition:
        $ref: '#/definitions/XapiActivityDefinition'
    required:
      - id
  XapiAgentGroup:
    description: >-
      YAML 2.0 does not support oneOf so this is used when object can be an
      Agent or a Group.
    type: object
    properties:
      objectType:
        type: string
        enum:
          - Agent
          - Group
      name:
        type: string
      mbox:
        type: string
      mbox_sha1sum:
        type: string
      openid:
        type: string
      account:
        $ref: '#/definitions/XapiAccount'
      member:
        type: array
        items:
          $ref: '#/definitions/XapiAgentGroup'
    required:
      - objectType
  XapiAttachment:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4111-attachments'
    type: object
    properties:
      usageType:
        type: string
      display:
        type: object
        additionalProperties:
          type: string
      description:
        type: object
        additionalProperties:
          type: string
      contentType:
        type: string
      length:
        type: integer
        format: int64
      sha2:
        type: string
      fileUrl:
        type: string
    required:
      - usageType
      - display
      - contentType
      - length
      - sha2
  XapiContext:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#416-context'
    type: object
    properties:
      registration:
        type: string
      instructor:
        $ref: '#/definitions/XapiAgentGroup'
      team:
        $ref: '#/definitions/XapiAgentGroup'
      contextActivities:
        $ref: '#/definitions/XapiContextActivity'
      revision:
        type: string
      platform:
        type: string
      language:
        type: string
      statement:
        $ref: '#/definitions/XapiStatementReference'
      extensions:
        type: object
        additionalProperties:
          type: object
  XapiContextActivity:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4162-contextactivities-property
    type: object
    properties:
      parent:
        type: array
        items:
          $ref: '#/definitions/XapiActivity'
      grouping:
        type: array
        items:
          $ref: '#/definitions/XapiActivity'
      category:
        type: array
        items:
          $ref: '#/definitions/XapiActivity'
      other:
        type: array
        items:
          $ref: '#/definitions/XapiActivity'
  XapiActivityDefinition:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#activity-definition'
    type: object
    properties:
      name:
        type: object
        additionalProperties:
          type: string
      description:
        type: object
        additionalProperties:
          type: string
      type:
        type: string
      moreInfo:
        type: string
      interactionType:
        type: string
      correctResponsesPattern:
        type: array
        items:
          type: string
      choices:
        type: array
        items:
          $ref: '#/definitions/XapiInteractionComponent'
      scale:
        type: array
        items:
          $ref: '#/definitions/XapiInteractionComponent'
      source:
        type: array
        items:
          $ref: '#/definitions/XapiInteractionComponent'
      target:
        type: array
        items:
          $ref: '#/definitions/XapiInteractionComponent'
      steps:
        type: array
        items:
          $ref: '#/definitions/XapiInteractionComponent'
      extensions:
        type: object
        additionalProperties:
          type: object
  XapiInteractionComponent:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#interaction-components
    type: object
    properties:
      id:
        type: string
      description:
        type: object
        additionalProperties:
          type: string
    required:
      - id
  XapiResult:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#415-result'
    type: object
    properties:
      score:
        $ref: '#/definitions/XapiScore'
      success:
        type: boolean
      completion:
        type: boolean
      response:
        type: string
      duration:
        type: string
      extensions:
        type: object
        additionalProperties:
          type: object
  XapiScore:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#4151-score'
    type: object
    properties:
      scaled:
        type: number
        format: double
      raw:
        type: number
        format: double
      min:
        type: number
        format: double
      max:
        type: number
        format: double
  XapiStatement:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#41-statement-properties
    type: object
    properties:
      id:
        type: string
      actor:
        $ref: '#/definitions/XapiAgentGroup'
      verb:
        $ref: '#/definitions/XapiVerb'
      objectActivity:
        $ref: '#/definitions/XapiActivity'
      objectAgentGroup:
        $ref: '#/definitions/XapiAgentGroup'
      objectStatementReference:
        $ref: '#/definitions/XapiStatementReference'
      objectSubStatement:
        $ref: '#/definitions/XapiStatement'
      result:
        $ref: '#/definitions/XapiResult'
      context:
        $ref: '#/definitions/XapiContext'
      timestamp:
        type: string
        format: date-time
      stored:
        type: string
        format: date-time
      authority:
        $ref: '#/definitions/XapiAgentGroup'
      attachments:
        type: array
        items:
          $ref: '#/definitions/XapiAttachment'
  XapiStatementReference:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#statement-references
    type: object
    properties:
      objectType:
        type: string
        default: StatementRef
      id:
        type: string
    required:
      - objectType
      - id
  XapiStatementResult:
    description: >-
      https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#42-retrieval-of-statements
    type: object
    properties:
      statements:
        type: array
        items:
          $ref: '#/definitions/XapiStatement'
      more:
        type: string
    required:
      - statements
  XapiVerb:
    description: 'https://github.com/adlnet/xAPI-Spec/blob/1.0.2/xAPI.md#413-verb'
    type: object
    properties:
      id:
        type: string
      display:
        type: object
        additionalProperties:
          type: string
    required:
      - id
  ConnectorSchema:
    title: Connector
    description: A content connector.
    type: object
    properties:
      connectorId:
        type: string
      contentConnectorType:
        type: string
        description: type of this content connector
      configuration:
        type: object
        description: >-
          configuration for this content connector, format is implementation
          specific
      additionalInstanceInformation:
        type: object
        description: >-
          additional information about this content connector, format is
          implementation specific and will only be present if the connector is
          enabled
      enabled:
        type: boolean
        description: is this connector enabled
  CreateConnectorSchema:
    title: CreateConnectorSchema
    type: object
    properties:
      contentConnectorType:
        type: string
        description: type of this content connector
      configuration:
        type: object
        description: >-
          configuration for this content connector, format is implementation
          specific
      enabled:
        type: boolean
        description: is this connector enabled
        default: true
    required:
      - contentConnectorType
      - configuration
  UpdateConnectorSchema:
    title: UpdateConnectorSchema
    type: object
    properties:
      configuration:
        type: object
        description: >-
          configuration for this content connector, format is implementation
          specific
      enabled:
        type: boolean
        description: is this connector enabled
  ConnectorListSchema:
    title: ConnectorListSchema
    description: List of content connectors.
    type: object
    properties:
      connectorEntries:
        type: array
        items:
          $ref: '#/definitions/ConnectorSchema'
  ConnectorContentItemSchema:
    title: ConnectorContentItemSchema
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      updated:
        type: string
        format: date-time
      metadata:
        $ref: '#/definitions/MetadataSchema'
  ConnectorContentListEntrySchema:
    title: ConnectorContentListEntrySchema
    type: object
    properties:
      connectorType:
        type: string
      connectorId:
        type: string
      details:
        $ref: '#/definitions/ConnectorContentItemSchema'
  ConnectorContentListSchema:
    title: ConnectorContentListSchema
    description: List of content available via a connector
    type: object
    properties:
      contentEntries:
        type: array
        items:
          $ref: '#/definitions/ConnectorContentListEntrySchema'
      more:
        type: string
  ConnectorContentSearchSchema:
    title: ConnectorContentSearchSchema
    description: Search options for remote connector content
    type: object
    properties:
      connectorId:
        type: string
        description: only search using the specified connector
      search:
        type: string
      since:
        type: string
        format: date-time
        description: >-
          Only items updated since the specified ISO 8601 TimeStamp (inclusive)
          are included. If a time zone is not specified, UTC time zone will be
          used.
      context:
        $ref: '#/definitions/ConnectorContentSearchContextSchema'
      more:
        description: >-
          Token for getting the next set of results, from the prior set of
          results.
        type: string
  ConnectorContentSearchContextSchema:
    title: ConnectorContentSearchContextSchema
    description: >-
      Additional information about the sort of result desired, or who the
      audience of the results will be. May only impact the results for some
      connectors.
    type: object
    properties:
      language:
        type: string
  RefreshConnectorResultSchema:
    title: refreshConnectorResultSchema
    type: object
    properties:
      connectorId:
        type: string
      connectorPluginName:
        type: string
      refreshStatus:
        title: RefreshStatus
        type: string
        enum:
          - SUBMITTED
          - RUNNING
          - COMPLETE
          - ERROR
          - TIMEOUT
      updatedItems:
        type: integer
      message:
        type: string
  RefreshConnectorResultListSchema:
    title: RefreshConnectorResultListSchema
    description: List of connector content refresh job results
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/RefreshConnectorResultSchema'
  PlayerConfigurationResultsSchema:
    title: PlayerConfigurationResultsSchema
    type: object
    properties:
      legacyData:
        type: string
      registrationInstance:
        type: integer
        format: int32
      courseVersion:
        type: integer
        format: int32
  PlayerConfigurationSchema:
    title: PlayerConfigurationSchema
    type: object
    properties:
      registrationId:
        type: string
      instance:
        type: integer
        format: int32
      courseId:
        type: string
      isTracking:
        type: boolean
      forceFrameset:
        type: boolean
      forceReview:
        type: boolean
      startSco:
        type: string
      webPath:
        type: string
      manifestDirPath:
        type: string
      redirectOnExitUrl:
        type: string
      remoteUrlKey:
        type: string
        description: >-
          Key to look up in RemoteDeliverPageUrlMap. If a match is found it will
          be used to set RemoteDeliverPageUrl for this request.
      width:
        type: integer
        format: int32
      height:
        type: integer
        format: int32
      left:
        type: integer
        format: int32
      top:
        type: integer
        format: int32
      player:
        type: string
        default: modern
      forOffline:
        type: boolean
        default: 'false'
      cultureCode:
        type: string
      includeRegistration:
        type: boolean
    required:
      - registrationId
  PlayerResultsSchema:
    title: PlayerResultsSchema
    type: object
    properties:
      isExitPlayer:
        type: boolean
      registrationId:
        type: string
      instance:
        type: integer
        format: int32
      sequence:
        type: integer
        format: int32
      legacyData:
        type: string
  EventMessage:
    title: eventMessage
    type: object
    properties:
      payloadId:
        type: string
      subscriptionId:
        type: string
      topic:
        type: string
      subtopics:
        type: array
        items:
          type: string
      tenantName:
        type: string
      timestamp:
        type: string
        format: date-time
      body:
        type: object
      bodyVersion:
        type: string
      messageVersion:
        type: string
      resources:
        $ref: '#/definitions/ResourcesSchema'
  ResourcesSchema:
    title: resourcesSchema
    type: object
    properties:
      course:
        $ref: '#/definitions/CourseResourceSchema'
      registration:
        $ref: '#/definitions/RegistrationResourceSchema'
  CourseResourceSchema:
    title: courseResourceSchema
    type: object
    properties:
      id:
        type: string
      learningStandard:
        type: string
      version:
        type: integer
  RegistrationResourceSchema:
    title: registrationResourceSchema
    type: object
    properties:
      id:
        type: string
      instance:
        type: integer
      learner:
        $ref: '#/definitions/LearnerSchema'
      isDispatch:
        type: boolean
  NotificationFailedBody:
    title: notificationFailedBody
    type: object
    properties:
      subscriptionDefinition:
        $ref: '#/definitions/SubscriptionDefinitionSchema'
        description: The subscription whose message failed.
      message:
        $ref: '#/definitions/EventMessage'
        description: The contents of the message which failed.
      errorMessage:
        type: string
        description: The error in Engine which caused the failure.
      errorReference:
        type: string
        description: A reference to the error in Engine.
      httpResponseCode:
        type: integer
        description: The response code Engine recieved after attempting to send.
      responseBody:
        type: object
        description: The response body Engine recieved after attempting to send.
  XapiGetAuthorityBody:
    title: xapiGetAuthorityBody
    type: object
    properties:
      authorizationHeader:
        type: string
        description: The authorization header Engine recieved at an xAPI endpoint.
    required:
      - authorizationHeader
  XapiGetAuthorityResponseSchema:
    title: xapiGetAuthorityResponseSchema
    type: object
    properties:
      verified:
        type: boolean
        description: >-
          Is there an actor associated with these auth credentials? Unverified
          credentials will always be rejected.
      permission:
        type: string
        enum:
          - NONE
          - USER
          - ROOT
          - READONLY
          - WRITEONLY
        description: Permissions of the associated actor.
      accountId:
        type: string
        description: The AccountId of the associated actor.
    required:
      - verified