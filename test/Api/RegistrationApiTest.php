<?php
/**
 * RegistrationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * RegistrationApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegistrationApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for abandonRegistrationSessions
     *
     * Abandon all sessions for `registrationId`. Currently only cmi5 session abandon is supported. For cmi5, section 9.3.6 of the specification allows for an activity to indicate an abnormal termination by a learner's action or due to a system failure. This endpoint thus allows for an activity to mark the session belonging to the specified registration as abandoned..
     *
     */
    public function testAbandonRegistrationSessions()
    {
    }

    /**
     * Test case for buildRegistrationLaunchLink
     *
     * Returns the link to use to launch this registration.
     *
     */
    public function testBuildRegistrationLaunchLink()
    {
    }

    /**
     * Test case for createNewRegistrationInstance
     *
     * Create a new instance for this registration specified by the registration ID.
     *
     */
    public function testCreateNewRegistrationInstance()
    {
    }

    /**
     * Test case for createRegistration
     *
     * Create a registration..
     *
     */
    public function testCreateRegistration()
    {
    }

    /**
     * Test case for createRegistrationWithLaunchLink
     *
     * Creates a registration and returns the link to use to launch it.
     *
     */
    public function testCreateRegistrationWithLaunchLink()
    {
    }

    /**
     * Test case for deleteRegistration
     *
     * Delete `registrationId`.
     *
     */
    public function testDeleteRegistration()
    {
    }

    /**
     * Test case for deleteRegistrationConfigurationSetting
     *
     * Clears the `settingId` value for this registration.
     *
     */
    public function testDeleteRegistrationConfigurationSetting()
    {
    }

    /**
     * Test case for deleteRegistrationGlobalData
     *
     * delete global data associated with `registrationId`.
     *
     */
    public function testDeleteRegistrationGlobalData()
    {
    }

    /**
     * Test case for deleteRegistrationInstance
     *
     * Delete instance `instanceId` of `registrationId`.
     *
     */
    public function testDeleteRegistrationInstance()
    {
    }

    /**
     * Test case for deleteRegistrationInstanceConfigurationSetting
     *
     * Clears the `settingId` value for this registration instance.
     *
     */
    public function testDeleteRegistrationInstanceConfigurationSetting()
    {
    }

    /**
     * Test case for deleteRegistrationProgress
     *
     * delete registration progress (clear registration).
     *
     */
    public function testDeleteRegistrationProgress()
    {
    }

    /**
     * Test case for finalizeRegistrationInstanceProgress
     *
     * Set registration final progress for instance `instanceId` of `registrationId`. Registration or activity will be placed in review mode to prevent any more changes to this progress. This endpoint may be used for any learning standard, but in cmi5 it has the meaning of \"waive\" (see section 9.3.7 of the cmi5 specification for details on the Waived statement). In the case of cmi5, this endpoint requires `isCompleted` and `isPassed` to both be set to `true` for the waive operation..
     *
     */
    public function testFinalizeRegistrationInstanceProgress()
    {
    }

    /**
     * Test case for finalizeRegistrationProgress
     *
     * Set registration's or activity's final progress for `registrationId`. Registration or activity will be placed in review mode to prevent any more changes to this progress. This endpoint may be used for any learning standard, but in cmi5 it has the meaning of \"waive\" (see section 9.3.7 of the cmi5 specification for details on the Waived statement). In the case of cmi5, this endpoint requires `isCompleted` and `isPassed` to both be set to `true` for the waive operation..
     *
     */
    public function testFinalizeRegistrationProgress()
    {
    }

    /**
     * Test case for getRegistration
     *
     * Does this registration exist?.
     *
     */
    public function testGetRegistration()
    {
    }

    /**
     * Test case for getRegistrationConfiguration
     *
     * Returns all configuration settings for this registration.
     *
     */
    public function testGetRegistrationConfiguration()
    {
    }

    /**
     * Test case for getRegistrationInstanceConfiguration
     *
     * Returns all configuration settings for this registration instance.
     *
     */
    public function testGetRegistrationInstanceConfiguration()
    {
    }

    /**
     * Test case for getRegistrationInstanceLaunchHistory
     *
     * Returns history of this registration's launches.
     *
     */
    public function testGetRegistrationInstanceLaunchHistory()
    {
    }

    /**
     * Test case for getRegistrationInstanceProgress
     *
     * Get registration progress for instance `instanceId` of `registrationId`.
     *
     */
    public function testGetRegistrationInstanceProgress()
    {
    }

    /**
     * Test case for getRegistrationInstanceStatements
     *
     * Get xAPI statements for instance `instanceId` of `registrationId`.
     *
     */
    public function testGetRegistrationInstanceStatements()
    {
    }

    /**
     * Test case for getRegistrationInstances
     *
     * Get all the instances of this the registration specified by the registration ID.
     *
     */
    public function testGetRegistrationInstances()
    {
    }

    /**
     * Test case for getRegistrationLaunchHistory
     *
     * Returns history of this registration's launches.
     *
     */
    public function testGetRegistrationLaunchHistory()
    {
    }

    /**
     * Test case for getRegistrationProgress
     *
     * Get registration progress for `registrationId`.
     *
     */
    public function testGetRegistrationProgress()
    {
    }

    /**
     * Test case for getRegistrationStatements
     *
     * Get xAPI statements for `registrationId`.
     *
     */
    public function testGetRegistrationStatements()
    {
    }

    /**
     * Test case for getRegistrations
     *
     * Gets a list of registrations including a summary of the status of each registration..
     *
     */
    public function testGetRegistrations()
    {
    }

    /**
     * Test case for ltiBasicOutcomes
     *
     * Endpoint for LTI basic outcomes.
     *
     */
    public function testLtiBasicOutcomes()
    {
    }

    /**
     * Test case for setRegistrationConfiguration
     *
     * Set configuration settings for this registration..
     *
     */
    public function testSetRegistrationConfiguration()
    {
    }

    /**
     * Test case for setRegistrationInstanceConfiguration
     *
     * Set configuration settings for this registration instance..
     *
     */
    public function testSetRegistrationInstanceConfiguration()
    {
    }
}
