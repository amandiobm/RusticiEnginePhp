<?php
/**
 * ImportAdHocReferenceRequestSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Engine\V2\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ImportAdHocReferenceRequestSchema Class Doc Comment
 *
 * @category Class
 * @description Request to import a course by referencing existing content where the course content is already available but does not have a manifest available, but is instead to be defined in this request.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImportAdHocReferenceRequestSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImportAdHocReferenceRequestSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'learning_standard' => 'string',
        'title' => 'string',
        'launch_url' => 'string',
        'xapi_activity_id' => 'string',
        'cmi5_publisher_id' => 'string',
        'web_path_to_course' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'learning_standard' => null,
        'title' => null,
        'launch_url' => null,
        'xapi_activity_id' => null,
        'cmi5_publisher_id' => null,
        'web_path_to_course' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'learning_standard' => 'learningStandard',
        'title' => 'title',
        'launch_url' => 'launchUrl',
        'xapi_activity_id' => 'xapiActivityId',
        'cmi5_publisher_id' => 'cmi5PublisherId',
        'web_path_to_course' => 'webPathToCourse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'learning_standard' => 'setLearningStandard',
        'title' => 'setTitle',
        'launch_url' => 'setLaunchUrl',
        'xapi_activity_id' => 'setXapiActivityId',
        'cmi5_publisher_id' => 'setCmi5PublisherId',
        'web_path_to_course' => 'setWebPathToCourse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'learning_standard' => 'getLearningStandard',
        'title' => 'getTitle',
        'launch_url' => 'getLaunchUrl',
        'xapi_activity_id' => 'getXapiActivityId',
        'cmi5_publisher_id' => 'getCmi5PublisherId',
        'web_path_to_course' => 'getWebPathToCourse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['learning_standard'] = isset($data['learning_standard']) ? $data['learning_standard'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['launch_url'] = isset($data['launch_url']) ? $data['launch_url'] : null;
        $this->container['xapi_activity_id'] = isset($data['xapi_activity_id']) ? $data['xapi_activity_id'] : null;
        $this->container['cmi5_publisher_id'] = isset($data['cmi5_publisher_id']) ? $data['cmi5_publisher_id'] : null;
        $this->container['web_path_to_course'] = isset($data['web_path_to_course']) ? $data['web_path_to_course'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['learning_standard'] === null) {
            $invalidProperties[] = "'learning_standard' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['launch_url'] === null) {
            $invalidProperties[] = "'launch_url' can't be null";
        }
        if ($this->container['web_path_to_course'] === null) {
            $invalidProperties[] = "'web_path_to_course' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets learning_standard
     *
     * @return string
     */
    public function getLearningStandard()
    {
        return $this->container['learning_standard'];
    }

    /**
     * Sets learning_standard
     *
     * @param string $learning_standard The learning standard for the course to import.
     *
     * @return $this
     */
    public function setLearningStandard($learning_standard)
    {
        $this->container['learning_standard'] = $learning_standard;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the course to import.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets launch_url
     *
     * @return string
     */
    public function getLaunchUrl()
    {
        return $this->container['launch_url'];
    }

    /**
     * Sets launch_url
     *
     * @param string $launch_url URL to the specific content file to launch when this course is launched.
     *
     * @return $this
     */
    public function setLaunchUrl($launch_url)
    {
        $this->container['launch_url'] = $launch_url;

        return $this;
    }

    /**
     * Gets xapi_activity_id
     *
     * @return string
     */
    public function getXapiActivityId()
    {
        return $this->container['xapi_activity_id'];
    }

    /**
     * Sets xapi_activity_id
     *
     * @param string $xapi_activity_id The xApi activity ID associated with this course. In general, this can be omitted if this course is not 'using xAPI and following the Tin Can launch guidelines'.
     *
     * @return $this
     */
    public function setXapiActivityId($xapi_activity_id)
    {
        $this->container['xapi_activity_id'] = $xapi_activity_id;

        return $this;
    }

    /**
     * Gets cmi5_publisher_id
     *
     * @return string
     */
    public function getCmi5PublisherId()
    {
        return $this->container['cmi5_publisher_id'];
    }

    /**
     * Sets cmi5_publisher_id
     *
     * @param string $cmi5_publisher_id The publisher ID for a CMI5 course. This can be omitted if the learning standard is not CMI5.
     *
     * @return $this
     */
    public function setCmi5PublisherId($cmi5_publisher_id)
    {
        $this->container['cmi5_publisher_id'] = $cmi5_publisher_id;

        return $this;
    }

    /**
     * Gets web_path_to_course
     *
     * @return string
     */
    public function getWebPathToCourse()
    {
        return $this->container['web_path_to_course'];
    }

    /**
     * Sets web_path_to_course
     *
     * @param string $web_path_to_course This is the URL to the root of the course, where the course content is already available.
     *
     * @return $this
     */
    public function setWebPathToCourse($web_path_to_course)
    {
        $this->container['web_path_to_course'] = $web_path_to_course;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


