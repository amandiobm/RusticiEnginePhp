<?php
/**
 * SubscriptionAuthDefinitionSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubscriptionAuthDefinitionSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionAuthDefinitionSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionAuthDefinitionSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscription_auth_type' => 'string',
        'key' => 'string',
        'secret' => 'string',
        'scope' => 'string',
        'token_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscription_auth_type' => null,
        'key' => null,
        'secret' => null,
        'scope' => null,
        'token_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription_auth_type' => 'subscriptionAuthType',
        'key' => 'key',
        'secret' => 'secret',
        'scope' => 'scope',
        'token_url' => 'tokenUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription_auth_type' => 'setSubscriptionAuthType',
        'key' => 'setKey',
        'secret' => 'setSecret',
        'scope' => 'setScope',
        'token_url' => 'setTokenUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription_auth_type' => 'getSubscriptionAuthType',
        'key' => 'getKey',
        'secret' => 'getSecret',
        'scope' => 'getScope',
        'token_url' => 'getTokenUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_AUTH_TYPE_OAUTH2_CLIENT_CREDENTIALS = 'Oauth2ClientCredentials';
    const SUBSCRIPTION_AUTH_TYPE_HMACSHA256 = 'HMACSHA256';
    const SUBSCRIPTION_AUTH_TYPE_HMACSHA512 = 'HMACSHA512';
    const SUBSCRIPTION_AUTH_TYPE_BASIC = 'Basic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionAuthTypeAllowableValues()
    {
        return [
            self::SUBSCRIPTION_AUTH_TYPE_OAUTH2_CLIENT_CREDENTIALS,
            self::SUBSCRIPTION_AUTH_TYPE_HMACSHA256,
            self::SUBSCRIPTION_AUTH_TYPE_HMACSHA512,
            self::SUBSCRIPTION_AUTH_TYPE_BASIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscription_auth_type'] = isset($data['subscription_auth_type']) ? $data['subscription_auth_type'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['token_url'] = isset($data['token_url']) ? $data['token_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subscription_auth_type'] === null) {
            $invalidProperties[] = "'subscription_auth_type' can't be null";
        }
        $allowedValues = $this->getSubscriptionAuthTypeAllowableValues();
        if (!is_null($this->container['subscription_auth_type']) && !in_array($this->container['subscription_auth_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscription_auth_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription_auth_type
     *
     * @return string
     */
    public function getSubscriptionAuthType()
    {
        return $this->container['subscription_auth_type'];
    }

    /**
     * Sets subscription_auth_type
     *
     * @param string $subscription_auth_type subscription_auth_type
     *
     * @return $this
     */
    public function setSubscriptionAuthType($subscription_auth_type)
    {
        $allowedValues = $this->getSubscriptionAuthTypeAllowableValues();
        if (!in_array($subscription_auth_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscription_auth_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscription_auth_type'] = $subscription_auth_type;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key / username / client ID depending on auth mode
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string $secret password or secret depending on auth mode. For HMAC, this is the base64 of the secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope OAuth2 scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets token_url
     *
     * @return string
     */
    public function getTokenUrl()
    {
        return $this->container['token_url'];
    }

    /**
     * Sets token_url
     *
     * @param string $token_url OAuth2 authorization endpoint
     *
     * @return $this
     */
    public function setTokenUrl($token_url)
    {
        $this->container['token_url'] = $token_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


