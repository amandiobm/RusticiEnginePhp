<?php
/**
 * FinalizeRegistrationProgressSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Engine\V2\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FinalizeRegistrationProgressSchema Class Doc Comment
 *
 * @category Class
 * @description The schema for the client to send to the API to finalize a registration&#39;s progress for a course or activity
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinalizeRegistrationProgressSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FinalizeRegistrationProgressSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_completed' => 'bool',
        'is_passed' => 'bool',
        'score' => '\Swagger\Client\Model\ScoreSchema',
        'total_seconds_tracked' => 'double',
        'update_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_completed' => null,
        'is_passed' => null,
        'score' => null,
        'total_seconds_tracked' => 'double',
        'update_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_completed' => 'isCompleted',
        'is_passed' => 'isPassed',
        'score' => 'score',
        'total_seconds_tracked' => 'totalSecondsTracked',
        'update_reason' => 'updateReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_completed' => 'setIsCompleted',
        'is_passed' => 'setIsPassed',
        'score' => 'setScore',
        'total_seconds_tracked' => 'setTotalSecondsTracked',
        'update_reason' => 'setUpdateReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_completed' => 'getIsCompleted',
        'is_passed' => 'getIsPassed',
        'score' => 'getScore',
        'total_seconds_tracked' => 'getTotalSecondsTracked',
        'update_reason' => 'getUpdateReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UPDATE_REASON_TEST_OUT = 'TestOut';
    const UPDATE_REASON_EQUIVALENT = 'Equivalent';
    const UPDATE_REASON_EXTERNAL_EQUIVALENT = 'ExternalEquivalent';
    const UPDATE_REASON_ADMINISTRATIVE = 'Administrative';
    const UPDATE_REASON_OTHER = 'Other';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateReasonAllowableValues()
    {
        return [
            self::UPDATE_REASON_TEST_OUT,
            self::UPDATE_REASON_EQUIVALENT,
            self::UPDATE_REASON_EXTERNAL_EQUIVALENT,
            self::UPDATE_REASON_ADMINISTRATIVE,
            self::UPDATE_REASON_OTHER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_completed'] = isset($data['is_completed']) ? $data['is_completed'] : null;
        $this->container['is_passed'] = isset($data['is_passed']) ? $data['is_passed'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['total_seconds_tracked'] = isset($data['total_seconds_tracked']) ? $data['total_seconds_tracked'] : null;
        $this->container['update_reason'] = isset($data['update_reason']) ? $data['update_reason'] : 'Administrative';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUpdateReasonAllowableValues();
        if (!is_null($this->container['update_reason']) && !in_array($this->container['update_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'update_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_completed
     *
     * @return bool
     */
    public function getIsCompleted()
    {
        return $this->container['is_completed'];
    }

    /**
     * Sets is_completed
     *
     * @param bool $is_completed If provided, sets final completion status to completed (true) or incomplete (false)
     *
     * @return $this
     */
    public function setIsCompleted($is_completed)
    {
        $this->container['is_completed'] = $is_completed;

        return $this;
    }

    /**
     * Gets is_passed
     *
     * @return bool
     */
    public function getIsPassed()
    {
        return $this->container['is_passed'];
    }

    /**
     * Sets is_passed
     *
     * @param bool $is_passed If provided, sets final success status to passed (true) or failed (false)
     *
     * @return $this
     */
    public function setIsPassed($is_passed)
    {
        $this->container['is_passed'] = $is_passed;

        return $this;
    }

    /**
     * Gets score
     *
     * @return \Swagger\Client\Model\ScoreSchema
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param \Swagger\Client\Model\ScoreSchema $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets total_seconds_tracked
     *
     * @return double
     */
    public function getTotalSecondsTracked()
    {
        return $this->container['total_seconds_tracked'];
    }

    /**
     * Sets total_seconds_tracked
     *
     * @param double $total_seconds_tracked If provided, sets final tracked time (how long the course or activity took to complete)
     *
     * @return $this
     */
    public function setTotalSecondsTracked($total_seconds_tracked)
    {
        $this->container['total_seconds_tracked'] = $total_seconds_tracked;

        return $this;
    }

    /**
     * Gets update_reason
     *
     * @return string
     */
    public function getUpdateReason()
    {
        return $this->container['update_reason'];
    }

    /**
     * Sets update_reason
     *
     * @param string $update_reason The reason why this was finalized. Possible reasons are: tested out (TestOut), or completed an equivalent activity within this course (Equivalent), or completed an equivalent activity outside of this course (ExternalEquivalent), or an administrator has marked this as complete (Administrative), or another reason (Other). Note that Other is not a valid reason for cmi5 because cmi5 requires the waived reason to be one of the four reasons defined in the cmi5 specification. Otherwise, the Other reason may be used with the other learning standards.
     *
     * @return $this
     */
    public function setUpdateReason($update_reason)
    {
        $allowedValues = $this->getUpdateReasonAllowableValues();
        if (!is_null($update_reason) && !in_array($update_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'update_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['update_reason'] = $update_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


