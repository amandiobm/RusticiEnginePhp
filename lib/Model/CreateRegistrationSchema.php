<?php
/**
 * CreateRegistrationSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Engine\V2\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateRegistrationSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateRegistrationSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateRegistrationSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'course_id' => 'string',
        'learner' => '\Swagger\Client\Model\LearnerSchema',
        'registration_id' => 'string',
        'for_credit' => 'bool',
        'xapi_registration_id' => 'string',
        'post_back' => '\Swagger\Client\Model\PostBackSchema',
        'initial_registration_state' => '\Swagger\Client\Model\RegistrationSchema',
        'initial_settings' => '\Swagger\Client\Model\SettingsPostSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'course_id' => null,
        'learner' => null,
        'registration_id' => null,
        'for_credit' => null,
        'xapi_registration_id' => null,
        'post_back' => null,
        'initial_registration_state' => null,
        'initial_settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'course_id' => 'courseId',
        'learner' => 'learner',
        'registration_id' => 'registrationId',
        'for_credit' => 'forCredit',
        'xapi_registration_id' => 'xapiRegistrationId',
        'post_back' => 'postBack',
        'initial_registration_state' => 'initialRegistrationState',
        'initial_settings' => 'initialSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'course_id' => 'setCourseId',
        'learner' => 'setLearner',
        'registration_id' => 'setRegistrationId',
        'for_credit' => 'setForCredit',
        'xapi_registration_id' => 'setXapiRegistrationId',
        'post_back' => 'setPostBack',
        'initial_registration_state' => 'setInitialRegistrationState',
        'initial_settings' => 'setInitialSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'course_id' => 'getCourseId',
        'learner' => 'getLearner',
        'registration_id' => 'getRegistrationId',
        'for_credit' => 'getForCredit',
        'xapi_registration_id' => 'getXapiRegistrationId',
        'post_back' => 'getPostBack',
        'initial_registration_state' => 'getInitialRegistrationState',
        'initial_settings' => 'getInitialSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['course_id'] = isset($data['course_id']) ? $data['course_id'] : null;
        $this->container['learner'] = isset($data['learner']) ? $data['learner'] : null;
        $this->container['registration_id'] = isset($data['registration_id']) ? $data['registration_id'] : null;
        $this->container['for_credit'] = isset($data['for_credit']) ? $data['for_credit'] : true;
        $this->container['xapi_registration_id'] = isset($data['xapi_registration_id']) ? $data['xapi_registration_id'] : null;
        $this->container['post_back'] = isset($data['post_back']) ? $data['post_back'] : null;
        $this->container['initial_registration_state'] = isset($data['initial_registration_state']) ? $data['initial_registration_state'] : null;
        $this->container['initial_settings'] = isset($data['initial_settings']) ? $data['initial_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['course_id'] === null) {
            $invalidProperties[] = "'course_id' can't be null";
        }
        if ($this->container['learner'] === null) {
            $invalidProperties[] = "'learner' can't be null";
        }
        if ($this->container['registration_id'] === null) {
            $invalidProperties[] = "'registration_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets course_id
     *
     * @return string
     */
    public function getCourseId()
    {
        return $this->container['course_id'];
    }

    /**
     * Sets course_id
     *
     * @param string $course_id course_id
     *
     * @return $this
     */
    public function setCourseId($course_id)
    {
        $this->container['course_id'] = $course_id;

        return $this;
    }

    /**
     * Gets learner
     *
     * @return \Swagger\Client\Model\LearnerSchema
     */
    public function getLearner()
    {
        return $this->container['learner'];
    }

    /**
     * Sets learner
     *
     * @param \Swagger\Client\Model\LearnerSchema $learner learner
     *
     * @return $this
     */
    public function setLearner($learner)
    {
        $this->container['learner'] = $learner;

        return $this;
    }

    /**
     * Gets registration_id
     *
     * @return string
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param string $registration_id registration_id
     *
     * @return $this
     */
    public function setRegistrationId($registration_id)
    {
        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets for_credit
     *
     * @return bool
     */
    public function getForCredit()
    {
        return $this->container['for_credit'];
    }

    /**
     * Sets for_credit
     *
     * @param bool $for_credit for_credit
     *
     * @return $this
     */
    public function setForCredit($for_credit)
    {
        $this->container['for_credit'] = $for_credit;

        return $this;
    }

    /**
     * Gets xapi_registration_id
     *
     * @return string
     */
    public function getXapiRegistrationId()
    {
        return $this->container['xapi_registration_id'];
    }

    /**
     * Sets xapi_registration_id
     *
     * @param string $xapi_registration_id xapi_registration_id
     *
     * @return $this
     */
    public function setXapiRegistrationId($xapi_registration_id)
    {
        $this->container['xapi_registration_id'] = $xapi_registration_id;

        return $this;
    }

    /**
     * Gets post_back
     *
     * @return \Swagger\Client\Model\PostBackSchema
     */
    public function getPostBack()
    {
        return $this->container['post_back'];
    }

    /**
     * Sets post_back
     *
     * @param \Swagger\Client\Model\PostBackSchema $post_back post_back
     *
     * @return $this
     */
    public function setPostBack($post_back)
    {
        $this->container['post_back'] = $post_back;

        return $this;
    }

    /**
     * Gets initial_registration_state
     *
     * @return \Swagger\Client\Model\RegistrationSchema
     */
    public function getInitialRegistrationState()
    {
        return $this->container['initial_registration_state'];
    }

    /**
     * Sets initial_registration_state
     *
     * @param \Swagger\Client\Model\RegistrationSchema $initial_registration_state initial_registration_state
     *
     * @return $this
     */
    public function setInitialRegistrationState($initial_registration_state)
    {
        $this->container['initial_registration_state'] = $initial_registration_state;

        return $this;
    }

    /**
     * Gets initial_settings
     *
     * @return \Swagger\Client\Model\SettingsPostSchema
     */
    public function getInitialSettings()
    {
        return $this->container['initial_settings'];
    }

    /**
     * Sets initial_settings
     *
     * @param \Swagger\Client\Model\SettingsPostSchema $initial_settings initial_settings
     *
     * @return $this
     */
    public function setInitialSettings($initial_settings)
    {
        $this->container['initial_settings'] = $initial_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


