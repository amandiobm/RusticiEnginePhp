<?php
/**
 * CourseReferenceSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  RusticiSoftware\Engine\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Rustici Engine API
 *
 * Rustici Engine API
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.39
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RusticiSoftware\Engine\V2\Model;

use \ArrayAccess;
use \RusticiSoftware\Engine\V2\ObjectSerializer;

/**
 * CourseReferenceSchema Class Doc Comment
 *
 * @category Class
 * @description Basic information about a course for when a course is referenced by other objects, such as a registration.
 * @package  RusticiSoftware\Engine\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseReferenceSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CourseReferenceSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'title' => 'string',
        'version' => 'int',
        'course_reference_learning_standard' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'title' => null,
        'version' => 'int32',
        'course_reference_learning_standard' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'version' => 'version',
        'course_reference_learning_standard' => 'courseReferenceLearningStandard'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'version' => 'setVersion',
        'course_reference_learning_standard' => 'setCourseReferenceLearningStandard'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'version' => 'getVersion',
        'course_reference_learning_standard' => 'getCourseReferenceLearningStandard'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COURSE_REFERENCE_LEARNING_STANDARD_SCORM11 = 'SCORM11';
    const COURSE_REFERENCE_LEARNING_STANDARD_SCORM12 = 'SCORM12';
    const COURSE_REFERENCE_LEARNING_STANDARD_SCORM20042_NDEDITION = 'SCORM20042NDEDITION';
    const COURSE_REFERENCE_LEARNING_STANDARD_SCORM20043_RDEDITION = 'SCORM20043RDEDITION';
    const COURSE_REFERENCE_LEARNING_STANDARD_SCORM20044_THEDITION = 'SCORM20044THEDITION';
    const COURSE_REFERENCE_LEARNING_STANDARD_AICC = 'AICC';
    const COURSE_REFERENCE_LEARNING_STANDARD_XAPI = 'XAPI';
    const COURSE_REFERENCE_LEARNING_STANDARD_CMI5 = 'CMI5';
    const COURSE_REFERENCE_LEARNING_STANDARD_LTI11 = 'LTI11';
    const COURSE_REFERENCE_LEARNING_STANDARD_LTI13 = 'LTI13';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCourseReferenceLearningStandardAllowableValues()
    {
        return [
            self::COURSE_REFERENCE_LEARNING_STANDARD_SCORM11,
            self::COURSE_REFERENCE_LEARNING_STANDARD_SCORM12,
            self::COURSE_REFERENCE_LEARNING_STANDARD_SCORM20042_NDEDITION,
            self::COURSE_REFERENCE_LEARNING_STANDARD_SCORM20043_RDEDITION,
            self::COURSE_REFERENCE_LEARNING_STANDARD_SCORM20044_THEDITION,
            self::COURSE_REFERENCE_LEARNING_STANDARD_AICC,
            self::COURSE_REFERENCE_LEARNING_STANDARD_XAPI,
            self::COURSE_REFERENCE_LEARNING_STANDARD_CMI5,
            self::COURSE_REFERENCE_LEARNING_STANDARD_LTI11,
            self::COURSE_REFERENCE_LEARNING_STANDARD_LTI13,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['course_reference_learning_standard'] = isset($data['course_reference_learning_standard']) ? $data['course_reference_learning_standard'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCourseReferenceLearningStandardAllowableValues();
        if (!is_null($this->container['course_reference_learning_standard']) && !in_array($this->container['course_reference_learning_standard'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'course_reference_learning_standard', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets course_reference_learning_standard
     *
     * @return string
     */
    public function getCourseReferenceLearningStandard()
    {
        return $this->container['course_reference_learning_standard'];
    }

    /**
     * Sets course_reference_learning_standard
     *
     * @param string $course_reference_learning_standard course_reference_learning_standard
     *
     * @return $this
     */
    public function setCourseReferenceLearningStandard($course_reference_learning_standard)
    {
        $allowedValues = $this->getCourseReferenceLearningStandardAllowableValues();
        if (!is_null($course_reference_learning_standard) && !in_array($course_reference_learning_standard, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'course_reference_learning_standard', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['course_reference_learning_standard'] = $course_reference_learning_standard;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


